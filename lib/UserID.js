(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("UserID", [], factory);
	else if(typeof exports === 'object')
		exports["UserID"] = factory();
	else
		root["UserID"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(5);


/***/ },
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * Import dependency polyfills
	 */
	
	exports.__esModule = true;
	
	var _MurmurHash = __webpack_require__(6);
	
	var _MurmurHash2 = _interopRequireDefault(_MurmurHash);
	
	var _EverCookie = __webpack_require__(8);
	
	var _EverCookie2 = _interopRequireDefault(_EverCookie);
	
	var _Utils = __webpack_require__(7);
	
	var _Utils2 = _interopRequireDefault(_Utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var btoa = __webpack_require__(9);
	/**
	 * Import dependency classes
	 */
	
	/**
	 * User ID class
	 */
	var UserID = function () {
	    /**
	     * User ID constructor
	     */
	    function UserID() {
	        var _this = this;
	
	        _classCallCheck(this, UserID);
	
	        /**
	         * Clear previous version of FingerPrint
	         */
	        UserID.clearPrevious();
	        /**
	         * Generate IDs
	         */
	        this.IDEverCookie = "";
	        this.IDUID = "";
	        this.IDBASE = UserID.getFingerPrintHash(JSON.stringify([_Utils2.default.User.getInfo(), UserID.getUserLanguage(), UserID.getTimezoneOffset(), this.getPlugins()]));
	        /**
	         * Init EveryCookie and get ID
	         * @type {EverCookie}
	         */
	        this.EverCookie = new _EverCookie2.default("UserID_1.0.14");
	        this.IDEverCookie = this.EverCookie.getItem(true, "FingerPrint");
	        /**
	         * Get full ID
	         */
	        this.getUID(function (result) {
	            /**
	             * Convert user signs to Rambler format
	             */
	            _this.IDUID = UserID.getFingerPrintHash(JSON.stringify(result));
	            /**
	             * Write full user ID into the EverCookie
	             */
	            _this.EverCookie.setItem(true, "FingerPrint", _this.IDUID);
	        });
	        _Utils2.default.implementationStaticMethods(this, "UserID");
	    }
	    /**
	     * Clear previous version of FingerPrint
	     */
	
	
	    UserID.clearPrevious = function clearPrevious() {
	        /**
	         * Check if localStorage is supported
	         */
	        if (typeof localStorage !== "undefined") {
	            /**
	             * Loop all localStorage keys
	             */
	            for (var key in localStorage) {
	                /**
	                 * If key matched to FingerPrint and it is not current version, then remove that item from storages
	                 */
	                if (key.indexOf("FingerPrint") !== -1 && key.indexOf("UserID_1.0.14") === -1) {
	                    /**
	                     * Parse storage key and get storage version
	                     */
	                    var localKey = key.split("_");
	                    localKey = localKey.slice(0, localKey.length - 1);
	                    key = localKey.join("_");
	                    /**
	                     * Init EverCookie for that version
	                     */
	                    var LocalEverCookie = new _EverCookie2.default(key);
	                    /**
	                     * Clean storage
	                     */
	                    LocalEverCookie.clear(true);
	                    /**
	                     * Destroy storage
	                     */
	                    LocalEverCookie.destroy();
	                }
	            }
	        }
	    };
	    /**
	     * 32 bit FNV-1a hash
	     * @param str
	     * @param hash
	     * @return {number}
	     */
	
	
	    UserID.fnv32a = function fnv32a(str, hash) {
	        for (var i = 0; i < str.length; i++) {
	            hash = hash ^ str.charCodeAt(i);
	            hash = hash * 0x01000193 & 0xFFFFFFFF;
	        }
	        return hash;
	    };
	    /**
	     * Convert string to binary
	     * @param val
	     * @return {string}
	     */
	
	
	    UserID.tobinary = function tobinary(val) {
	        var ret = "";
	        for (var i = 0; i < 4; i++) {
	            ret += String.fromCharCode(val & 0xFF);
	            val = val >> 8;
	        }
	        return ret;
	    };
	    /**
	     * Get FingerPrint Hash
	     * @param dump
	     * @return {string}
	     */
	
	
	    UserID.getFingerPrintHash = function getFingerPrintHash(dump) {
	        var murmur = _MurmurHash2.default.x64hash128(dump, 31);
	        var i1 = 4004;
	        var i2 = 1471357547; // Fake date.
	        var i3 = UserID.fnv32a(murmur.substr(0, 16), murmur);
	        var i4 = UserID.fnv32a(murmur.substr(16, 16), murmur);
	        i4 = i4 & 0xFFFFFF00 | 0x01;
	        var ruid = "";
	        ruid += UserID.tobinary(i1);
	        ruid += UserID.tobinary(i2);
	        ruid += UserID.tobinary(i3);
	        ruid += UserID.tobinary(i4);
	        ruid += String.fromCharCode(0);
	        return btoa(ruid);
	    };
	    /**
	     * Get User Language
	     * @return {Object|boolean}
	     */
	
	
	    UserID.getUserLanguage = function getUserLanguage() {
	        try {
	            var _navigator = window.navigator;
	            return {
	                UserLanguage: _navigator.language || _navigator.userLanguage || _navigator.browserLanguage || _navigator.systemLanguage || ""
	            };
	        } catch (e) {
	            return false;
	        }
	    };
	    /**
	     * Get Timezone Offset
	     * @return {Object|boolean}
	     */
	
	
	    UserID.getTimezoneOffset = function getTimezoneOffset() {
	        try {
	            return {
	                TimezoneOffset: new Date().getTimezoneOffset()
	            };
	        } catch (e) {
	            return false;
	        }
	    };
	    /**
	     * Each emulation for Arrays and Objects
	     * @param obj
	     * @param iterator
	     * @param context
	     */
	
	
	    UserID.each = function each(obj, iterator, context) {
	        if (obj === null) {
	            return;
	        }
	        if (Array.prototype.forEach && obj.forEach === Array.prototype.forEach) {
	            obj.forEach(iterator, context);
	        } else if (obj.length === +obj.length) {
	            for (var i = 0, l = obj.length; i < l; i++) {
	                if (iterator.call(context, obj[i], i, obj) === {}) {
	                    return;
	                }
	            }
	        } else {
	            for (var key in obj) {
	                if (obj.hasOwnProperty(key)) {
	                    if (iterator.call(context, obj[key], key, obj) === {}) {
	                        return;
	                    }
	                }
	            }
	        }
	    };
	    /**
	     * Get user ID
	     * @return {string}
	     */
	
	
	    UserID.prototype.getID = function getID() {
	        /**
	         * Return full user ID, ID from storage or base ID if one of them exist
	         */
	        return this.IDUID || this.IDEverCookie || this.IDBASE;
	    };
	    /**
	     * Get user full ID
	     * @param callback
	     */
	
	
	    UserID.prototype.getUID = function getUID(callback) {
	        var _this2 = this;
	
	        this.getIP(function (result) {
	            callback([_Utils2.default.User.getInfo(), UserID.getUserLanguage(), UserID.getTimezoneOffset(), _this2.getPlugins(), result]);
	        });
	    };
	    /**
	     * Get Plugins
	     * @return {Object|boolean}
	     */
	
	
	    UserID.prototype.getPlugins = function getPlugins() {
	        try {
	            if (_Utils2.default.Browser.isMSIE()) {
	                return {
	                    Plugins: this.getIEPlugins()
	                };
	            } else {
	                return {
	                    Plugins: this.getRegularPlugins()
	                };
	            }
	        } catch (e) {
	            return false;
	        }
	    };
	    /**
	     * Get IE plugins
	     * @return {Array}
	     */
	
	
	    UserID.prototype.getIEPlugins = function getIEPlugins() {
	        try {
	            var arrResult = [];
	            /**
	             * If ActiveXObject supported
	             */
	            if (Object.getOwnPropertyDescriptor && Object.getOwnPropertyDescriptor(window, "ActiveXObject") || "ActiveXObject" in window) {
	                /**
	                 * List of expected plugins
	                 * @type {string[]}
	                 */
	                var arrExpectedPluginsList = ["AcroPDF.PDF", "Adodb.Stream", "AgControl.AgControl", "DevalVRXCtrl.DevalVRXCtrl.1", "MacromediaFlashPaper.MacromediaFlashPaper", "Msxml2.DOMDocument", "Msxml2.XMLHTTP", "PDF.PdfCtrl", "QuickTime.QuickTime", "QuickTimeCheckObject.QuickTimeCheck.1", "RealPlayer", "RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)", "RealVideo.RealVideo(tm) ActiveX Control (32-bit)", "Scripting.Dictionary", "SWCtl.SWCtl", "Shell.UIHelper", "ShockwaveFlash.ShockwaveFlash", "Skype.Detection", "TDCCtl.TDCCtl", "WMPlayer.OCX", "rmocx.RealPlayer G2 Control", "rmocx.RealPlayer G2 Control.1"];
	                /**
	                 * Detecting IE plugins by trying initialise it
	                 * @type {Array}
	                 */
	                arrResult = this.map(arrExpectedPluginsList, function (name) {
	                    try {
	                        var a = new ActiveXObject(name);
	                        if (a) {
	                            return name;
	                        } else {
	                            return null;
	                        }
	                    } catch (e) {
	                        return null;
	                    }
	                }, this);
	            }
	            /**
	             * If normal plugins supported added it to IE plugin list
	             */
	            if (window.navigator.plugins) {
	                arrResult = arrResult.concat(this.getRegularPlugins());
	            }
	            /**
	             * Return plugins list
	             */
	            return arrResult;
	        } catch (e) {
	            return [];
	        }
	    };
	    /**
	     * Get other browser plugins
	     * @return {Object}
	     */
	
	
	    UserID.prototype.getRegularPlugins = function getRegularPlugins() {
	        var _this3 = this;
	
	        try {
	            /**
	             * Plugins list
	             * @type {Array}
	             */
	            var arrPlugins = [];
	            /**
	             * Get plugins from navigator
	             */
	            for (var i = 0; i < window.navigator.plugins.length; i++) {
	                arrPlugins.push(window.navigator.plugins[i]);
	            }
	            /**
	             * Sort plugins by name
	             * @type {Array}
	             */
	            arrPlugins = arrPlugins.sort(function (a, b) {
	                if (a.name > b.name) {
	                    return 1;
	                }
	                if (a.name < b.name) {
	                    return -1;
	                }
	                return 0;
	            });
	            /**
	             * Extrude plugins info
	             */
	            return this.map(arrPlugins, function (p) {
	                var mimeTypes = _this3.map(p, function (mt) {
	                    return [mt.type, mt.suffixes].join("~");
	                }).join(",");
	                return [p.name, p.description, mimeTypes].join("::");
	            }, this);
	        } catch (e) {
	            return [];
	        }
	    };
	    /**
	     * Get user IP
	     * @return {Promise}
	     */
	
	
	    UserID.prototype.getIP = function getIP(callback) {
	        var _this4 = this;
	
	        try {
	            this.getIPFromRTC(function (result) {
	                if (result) {
	                    callback(result);
	                } else {
	                    _this4.getIPFromServer(callback);
	                }
	            });
	        } catch (e) {
	            callback(false);
	        }
	    };
	    /**
	     * Get IP from RTC
	     * @return {Promise}
	     */
	
	
	    UserID.prototype.getIPFromRTC = function getIPFromRTC(callback) {
	        try {
	            window.RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;
	            if (window.RTCPeerConnection) {
	                (function () {
	                    var pc = new window.RTCPeerConnection({ iceServers: [] });
	                    pc.onicecandidate = function (ice) {
	                        if (!ice || !ice.candidate || !ice.candidate.candidate) {
	                            callback(false);
	                        } else {
	                            var myIP = /([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/.exec(ice.candidate.candidate)[1];
	                            pc.onicecandidate = function () {
	                                return null;
	                            };
	                            callback({
	                                IP: myIP
	                            });
	                        }
	                    };
	                    pc.createDataChannel("");
	                    pc.createOffer().then(function (desc) {
	                        pc.setLocalDescription(desc);
	                    });
	                })();
	            } else {
	                callback(false);
	            }
	        } catch (e) {
	            callback(false);
	        }
	    };
	    /**
	     * Get user IP from server
	     * @param callback
	     */
	
	
	    UserID.prototype.getIPFromServer = function getIPFromServer(callback) {
	        try {
	            (function () {
	                var xhr = new XMLHttpRequest();
	                xhr.onload = function () {
	                    if (xhr.readyState != 4) {
	                        return;
	                    }
	                    if (xhr.status === 200 && xhr.responseText) {
	                        callback({
	                            IP: xhr.responseText
	                        });
	                    } else {
	                        callback(false);
	                    }
	                };
	                xhr.open("GET", "//ssp.rambler.ru/userip");
	                xhr.send();
	            })();
	        } catch (e) {
	            callback(false);
	        }
	    };
	    /**
	     * Map emulation for Arrays and Objects
	     * @param obj
	     * @param iterator
	     * @param context
	     * @return {Array}
	     */
	
	
	    UserID.prototype.map = function map(obj, iterator, context) {
	        var results = [];
	        if (obj === null) {
	            return results;
	        }
	        if (Array.prototype.map && obj.map === Array.prototype.map) {
	            return obj.map(iterator, context);
	        }
	        UserID.each(obj, function (value, index, list) {
	            results[results.length] = iterator.call(context, value, index, list);
	        }, context);
	        return results;
	    };
	
	    return UserID;
	}();
	
	exports.default = UserID;
	
	module.exports = UserID;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _Utils = __webpack_require__(7);
	
	var _Utils2 = _interopRequireDefault(_Utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * MurmurHash3
	 */
	var MurmurHash3 = function () {
	    /**
	     * MurmurHash3 constructor
	     */
	    function MurmurHash3() {
	        _classCallCheck(this, MurmurHash3);
	
	        _Utils2.default.implementationStaticMethods(this, "MurmurHash3");
	    }
	    /**
	     * MurmurHash3 related functions
	     *
	     * Given two 64bit int (as an array of two 32bit int) returns the two
	     * added together as a 64bit int (as an array of two 32bit int).
	     * @param m
	     * @param n
	     * @return {number[]}
	     */
	
	
	    MurmurHash3.x64Add = function x64Add(m, n) {
	        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
	        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
	        var o = [0, 0, 0, 0];
	        o[3] += m[3] + n[3];
	        o[2] += o[3] >>> 16;
	        o[3] &= 0xffff;
	        o[2] += m[2] + n[2];
	        o[1] += o[2] >>> 16;
	        o[2] &= 0xffff;
	        o[1] += m[1] + n[1];
	        o[0] += o[1] >>> 16;
	        o[1] &= 0xffff;
	        o[0] += m[0] + n[0];
	        o[0] &= 0xffff;
	        return [o[0] << 16 | o[1], o[2] << 16 | o[3]];
	    };
	    /**
	     * Given two 64bit int (as an array of two 32bit int) returns the two
	     * multiplied together as a 64bit int (as an array of two 32bit int).
	     * @param m
	     * @param n
	     * @return {number[]}
	     */
	
	
	    MurmurHash3.x64Multiply = function x64Multiply(m, n) {
	        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
	        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
	        var o = [0, 0, 0, 0];
	        o[3] += m[3] * n[3];
	        o[2] += o[3] >>> 16;
	        o[3] &= 0xffff;
	        o[2] += m[2] * n[3];
	        o[1] += o[2] >>> 16;
	        o[2] &= 0xffff;
	        o[2] += m[3] * n[2];
	        o[1] += o[2] >>> 16;
	        o[2] &= 0xffff;
	        o[1] += m[1] * n[3];
	        o[0] += o[1] >>> 16;
	        o[1] &= 0xffff;
	        o[1] += m[2] * n[2];
	        o[0] += o[1] >>> 16;
	        o[1] &= 0xffff;
	        o[1] += m[3] * n[1];
	        o[0] += o[1] >>> 16;
	        o[1] &= 0xffff;
	        o[0] += m[0] * n[3] + m[1] * n[2] + m[2] * n[1] + m[3] * n[0];
	        o[0] &= 0xffff;
	        return [o[0] << 16 | o[1], o[2] << 16 | o[3]];
	    };
	    /**
	     * Given a 64bit int (as an array of two 32bit int) and an int
	     * representing a number of bit positions, returns the 64bit int (as an
	     * array of two 32bit int) rotated left by that number of positions.
	     * @param m
	     * @param n
	     * @return {Array<number>}
	     */
	
	
	    MurmurHash3.x64Rotated = function x64Rotated(m, n) {
	        n %= 64;
	        if (n === 32) {
	            return [m[1], m[0]];
	        } else if (n < 32) {
	            return [m[0] << n | m[1] >>> 32 - n, m[1] << n | m[0] >>> 32 - n];
	        } else {
	            n -= 32;
	            return [m[1] << n | m[0] >>> 32 - n, m[0] << n | m[1] >>> 32 - n];
	        }
	    };
	    /**
	     * Given a 64bit int (as an array of two 32bit int) and an int
	     * representing a number of bit positions, returns the 64bit int (as an
	     * array of two 32bit int) shifted left by that number of positions.
	     * @param m
	     * @param n
	     * @return {Array<number>}
	     */
	
	
	    MurmurHash3.x64LeftShift = function x64LeftShift(m, n) {
	        n %= 64;
	        if (n === 0) {
	            return m;
	        } else if (n < 32) {
	            return [m[0] << n | m[1] >>> 32 - n, m[1] << n];
	        } else {
	            return [m[1] << n - 32, 0];
	        }
	    };
	    /**
	     * Given two 64bit int (as an array of two 32bit int) returns the two
	     * xor together as a 64bit int (as an array of two 32bit int).
	     * @param m
	     * @param n
	     * @return {Array<number>}
	     */
	
	
	    MurmurHash3.x64Xor = function x64Xor(m, n) {
	        return [m[0] ^ n[0], m[1] ^ n[1]];
	    };
	    /**
	     * Given a block, returns murmurHash3's final x64 mix of that block.
	     * (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the
	     * only place where we need to right shift 64bit int.)
	     * @param h
	     * @return {Array<number>}
	     */
	
	
	    MurmurHash3.x64mix = function x64mix(h) {
	        h = this.x64Xor(h, [0, h[0] >>> 1]);
	        h = this.x64Multiply(h, [0xff51afd7, 0xed558ccd]);
	        h = this.x64Xor(h, [0, h[0] >>> 1]);
	        h = this.x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);
	        h = this.x64Xor(h, [0, h[0] >>> 1]);
	        return h;
	    };
	    /**
	     * Given a string and an optional seed as an int, returns a 128 bit
	     * hash using the x64 flavor of MurmurHash3, as an unsigned hex.
	     * @param key
	     * @param seed
	     * @return {string}
	     */
	
	
	    MurmurHash3.x64hash128 = function x64hash128(key, seed) {
	        key = key || "";
	        seed = seed || 0;
	        var i = void 0;
	        var remainder = key.length % 16;
	        var bytes = key.length - remainder;
	        var h1 = [0, seed];
	        var h2 = [0, seed];
	        var k1 = [0, 0];
	        var k2 = [0, 0];
	        var c1 = [0x87c37b91, 0x114253d5];
	        var c2 = [0x4cf5ad43, 0x2745937f];
	        for (i = 0; i < bytes; i = i + 16) {
	            k1 = [key.charCodeAt(i + 4) & 0xff | (key.charCodeAt(i + 5) & 0xff) << 8 | (key.charCodeAt(i + 6) & 0xff) << 16 | (key.charCodeAt(i + 7) & 0xff) << 24, key.charCodeAt(i) & 0xff | (key.charCodeAt(i + 1) & 0xff) << 8 | (key.charCodeAt(i + 2) & 0xff) << 16 | (key.charCodeAt(i + 3) & 0xff) << 24];
	            k2 = [key.charCodeAt(i + 12) & 0xff | (key.charCodeAt(i + 13) & 0xff) << 8 | (key.charCodeAt(i + 14) & 0xff) << 16 | (key.charCodeAt(i + 15) & 0xff) << 24, key.charCodeAt(i + 8) & 0xff | (key.charCodeAt(i + 9) & 0xff) << 8 | (key.charCodeAt(i + 10) & 0xff) << 16 | (key.charCodeAt(i + 11) & 0xff) << 24];
	            k1 = this.x64Multiply(k1, c1);
	            k1 = this.x64Rotated(k1, 31);
	            k1 = this.x64Multiply(k1, c2);
	            h1 = this.x64Xor(h1, k1);
	            h1 = this.x64Rotated(h1, 27);
	            h1 = this.x64Add(h1, h2);
	            h1 = this.x64Add(this.x64Multiply(h1, [0, 5]), [0, 0x52dce729]);
	            k2 = this.x64Multiply(k2, c2);
	            k2 = this.x64Rotated(k2, 33);
	            k2 = this.x64Multiply(k2, c1);
	            h2 = this.x64Xor(h2, k2);
	            h2 = this.x64Rotated(h2, 31);
	            h2 = this.x64Add(h2, h1);
	            h2 = this.x64Add(this.x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);
	        }
	        k1 = [0, 0];
	        k2 = [0, 0];
	        switch (remainder) {
	            case 15:
	                k2 = this.x64Xor(k2, this.x64LeftShift([0, key.charCodeAt(i + 14)], 48));
	                break;
	            case 14:
	                k2 = this.x64Xor(k2, this.x64LeftShift([0, key.charCodeAt(i + 13)], 40));
	                break;
	            case 13:
	                k2 = this.x64Xor(k2, this.x64LeftShift([0, key.charCodeAt(i + 12)], 32));
	                break;
	            case 12:
	                k2 = this.x64Xor(k2, this.x64LeftShift([0, key.charCodeAt(i + 11)], 24));
	                break;
	            case 11:
	                k2 = this.x64Xor(k2, this.x64LeftShift([0, key.charCodeAt(i + 10)], 16));
	                break;
	            case 10:
	                k2 = this.x64Xor(k2, this.x64LeftShift([0, key.charCodeAt(i + 9)], 8));
	                break;
	            case 9:
	                k2 = this.x64Xor(k2, [0, key.charCodeAt(i + 8)]);
	                k2 = this.x64Multiply(k2, c2);
	                k2 = this.x64Rotated(k2, 33);
	                k2 = this.x64Multiply(k2, c1);
	                h2 = this.x64Xor(h2, k2);
	                break;
	            case 8:
	                k1 = this.x64Xor(k1, this.x64LeftShift([0, key.charCodeAt(i + 7)], 56));
	                break;
	            case 7:
	                k1 = this.x64Xor(k1, this.x64LeftShift([0, key.charCodeAt(i + 6)], 48));
	                break;
	            case 6:
	                k1 = this.x64Xor(k1, this.x64LeftShift([0, key.charCodeAt(i + 5)], 40));
	                break;
	            case 5:
	                k1 = this.x64Xor(k1, this.x64LeftShift([0, key.charCodeAt(i + 4)], 32));
	                break;
	            case 4:
	                k1 = this.x64Xor(k1, this.x64LeftShift([0, key.charCodeAt(i + 3)], 24));
	                break;
	            case 3:
	                k1 = this.x64Xor(k1, this.x64LeftShift([0, key.charCodeAt(i + 2)], 16));
	                break;
	            case 2:
	                k1 = this.x64Xor(k1, this.x64LeftShift([0, key.charCodeAt(i + 1)], 8));
	                break;
	            case 1:
	                k1 = this.x64Xor(k1, [0, key.charCodeAt(i)]);
	                k1 = this.x64Multiply(k1, c1);
	                k1 = this.x64Rotated(k1, 31);
	                k1 = this.x64Multiply(k1, c2);
	                h1 = this.x64Xor(h1, k1);
	                break;
	            default:
	        }
	        h1 = this.x64Xor(h1, [0, key.length]);
	        h2 = this.x64Xor(h2, [0, key.length]);
	        h1 = this.x64Add(h1, h2);
	        h2 = this.x64Add(h2, h1);
	        h1 = this.x64mix(h1);
	        h2 = this.x64mix(h2);
	        h1 = this.x64Add(h1, h2);
	        h2 = this.x64Add(h2, h1);
	        var n1 = h1[0] >>> 0;
	        var n2 = h1[1] >>> 0;
	        var n3 = h2[0] >>> 0;
	        var n4 = h2[1] >>> 0;
	        var s1 = ("00000000" + n1.toString(16)).slice(-8);
	        var s2 = ("00000000" + n2.toString(16)).slice(-8);
	        var s3 = ("00000000" + n3.toString(16)).slice(-8);
	        var s4 = ("00000000" + n4.toString(16)).slice(-8);
	        return s1 + s2 + s3 + s4;
	    };
	
	    return MurmurHash3;
	}();
	
	exports.default = MurmurHash3;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("Utils", [], factory);
		else if(typeof exports === 'object')
			exports["Utils"] = factory();
		else
			root["Utils"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = __webpack_require__(5);
	
	
	/***/ },
	/* 1 */,
	/* 2 */,
	/* 3 */,
	/* 4 */,
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/**
		 * Import subclasses
		 */
		
		exports.__esModule = true;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		var _UtilsAnimation = __webpack_require__(6);
		
		var _UtilsAnimation2 = _interopRequireDefault(_UtilsAnimation);
		
		var _UtilsBrowser = __webpack_require__(8);
		
		var _UtilsBrowser2 = _interopRequireDefault(_UtilsBrowser);
		
		var _UtilsCookie = __webpack_require__(9);
		
		var _UtilsCookie2 = _interopRequireDefault(_UtilsCookie);
		
		var _UtilsDocument = __webpack_require__(16);
		
		var _UtilsDocument2 = _interopRequireDefault(_UtilsDocument);
		
		var _UtilsDOM = __webpack_require__(18);
		
		var _UtilsDOM2 = _interopRequireDefault(_UtilsDOM);
		
		var _UtilsMouse = __webpack_require__(19);
		
		var _UtilsMouse2 = _interopRequireDefault(_UtilsMouse);
		
		var _UtilsScreen = __webpack_require__(20);
		
		var _UtilsScreen2 = _interopRequireDefault(_UtilsScreen);
		
		var _UtilsSystem = __webpack_require__(21);
		
		var _UtilsSystem2 = _interopRequireDefault(_UtilsSystem);
		
		var _UtilsUser = __webpack_require__(22);
		
		var _UtilsUser2 = _interopRequireDefault(_UtilsUser);
		
		var _UtilsWindow = __webpack_require__(17);
		
		var _UtilsWindow2 = _interopRequireDefault(_UtilsWindow);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		/**
		 * Global Utils class
		 */
		var Utils = function () {
		    function Utils() {
		        _classCallCheck(this, Utils);
		    }
		
		    Utils.warn = function warn(messange) {
		        if ((typeof console === "undefined" ? "undefined" : _typeof(console)) === "object") {
		            if (typeof console.warn === "function") {
		                //console.warn(messange);
		                return messange;
		            } else if (typeof console.log === "function") {
		                //console.log(messange);
		                return messange;
		            }
		        }
		    };
		    /**
		     * @deprecated Utils.getBoundingClientRect method was deprecated and soon will be removed. Please use Utils.DOM.getBoundingClientRect method.
		     */
		
		
		    Utils.getBoundingClientRect = function getBoundingClientRect(domNode) {
		        var domDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
		        var showForce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
		
		        Utils.warn("Utils.getBoundingClientRect method was deprecated and soon will be removed. Please use Utils.DOM.getBoundingClientRect method.");
		        return Utils.DOM.getBoundingClientRect(domNode, domDocument, showForce);
		    };
		
		    /**
		     * @deprecated Utils.findElementPosition method was deprecated and soon will be removed. Please use Utils.DOM.findElementPosition method.
		     */
		    Utils.findElementPosition = function findElementPosition(domNode) {
		        var domDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
		        var showForce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
		
		        Utils.warn("Utils.findElementPosition method was deprecated and soon will be removed. Please use Utils.DOM.findElementPosition method.");
		        return Utils.DOM.findElementPosition(domNode, domDocument, showForce);
		    };
		    /**
		     * Transfer static methods into the object
		     * @param realObject
		     * @param className
		     */
		
		
		    Utils.implementationStaticMethods = function implementationStaticMethods(realObject, className) {
		        if (!!realObject && (typeof realObject === "undefined" ? "undefined" : _typeof(realObject)) === "object") {
		            (function () {
		                var staticClass = realObject.constructor;
		                if (typeof staticClass === "function") {
		                    var methods = Object.keys(staticClass);
		                    if (methods && methods.length > 0) {
		                        var _loop = function _loop() {
		                            if (_isArray) {
		                                if (_i >= _iterator.length) return "break";
		                                _ref = _iterator[_i++];
		                            } else {
		                                _i = _iterator.next();
		                                if (_i.done) return "break";
		                                _ref = _i.value;
		                            }
		
		                            var method = _ref;
		
		                            if (typeof realObject[method] === "undefined") {
		                                realObject[method] = function () {
		                                    if (typeof staticClass !== "undefined") {
		                                        Utils.warn("That method was deprecated and soon will be removed. Please use " + (className || staticClass && staticClass.name || "Unknown") + "." + method + " method.");
		                                    }
		                                    return staticClass[method].apply(staticClass, arguments);
		                                };
		                            }
		                        };
		
		                        for (var _iterator = methods, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		                            var _ref;
		
		                            var _ret2 = _loop();
		
		                            if (_ret2 === "break") break;
		                        }
		                    }
		                }
		            })();
		        }
		    };
		    /**
		     * Get call stack trace
		     * @return Array<Object>
		     */
		
		
		    Utils.stack = function stack() {
		        var e = new Error();
		        return e && e.stack && e.stack.split("\n").slice(5).map(function (s) {
		            if (!s) {
		                return {};
		            }
		            var match = /^(.*)@(.*)\.js:([0-9]+):([0-9]+)$/ig.exec(s);
		            if (match) {
		                if (match[1]) {
		                    match[1] = /([^\/<]+)/ig.exec(match[1]);
		                    if (match[1]) {
		                        match[1] = match[1][0];
		                    }
		                }
		                return {
		                    column: match[4] || "",
		                    file: match[2] || "",
		                    line: match[3] || "",
		                    method: match[1] || ""
		                };
		            }
		            match = /^(.*)@(http|https):([^:]+):([0-9]+):([0-9]+)$/ig.exec(s);
		            if (match) {
		                return {
		                    column: match[5] || "",
		                    file: match[3] || "",
		                    line: match[4] || "",
		                    method: match[1] + ":" + match[2] || ""
		                };
		            }
		            match = /^(.*)@(.*):([0-9]+):([0-9]+)$/ig.exec(s);
		            if (match) {
		                return {
		                    column: match[4] || "",
		                    file: match[2] || "",
		                    line: match[3] || "",
		                    method: match[1] || ""
		                };
		            }
		            match = /^\s+at\s([^(]+)\s\((.*):([0-9]+):([0-9]+)\)$/ig.exec(s);
		            if (match) {
		                return {
		                    column: match[4] || "",
		                    file: match[2] || "",
		                    line: match[3] || "",
		                    method: match[1] || ""
		                };
		            }
		            match = /^\s+at\s(.*):([0-9]+):([0-9]+)$/ig.exec(s);
		            if (match) {
		                return {
		                    column: match[3] || "",
		                    file: match[1] || "",
		                    line: match[2] || "",
		                    method: ""
		                };
		            }
		            return s;
		        }) || [];
		    };
		    /**
		     * Get random ID
		     * @return {string}
		     */
		
		
		    Utils.getUID = function getUID() {
		        return Math.random().toString(36).substring(2);
		    };
		
		    return Utils;
		}();
		
		exports.default = Utils;
		
		Utils.Animation = _UtilsAnimation2.default;
		Utils.Browser = _UtilsBrowser2.default;
		Utils.Cookie = _UtilsCookie2.default;
		Utils.DOM = _UtilsDOM2.default;
		Utils.Document = _UtilsDocument2.default;
		Utils.Mouse = _UtilsMouse2.default;
		Utils.Screen = _UtilsScreen2.default;
		Utils.System = _UtilsSystem2.default;
		Utils.User = _UtilsUser2.default;
		Utils.Window = _UtilsWindow2.default;
		module.exports = Utils;
	
	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/**
		 * Import subclasses
		 */
		
		exports.__esModule = true;
		
		var _UtilsAnimationEasing = __webpack_require__(7);
		
		var _UtilsAnimationEasing2 = _interopRequireDefault(_UtilsAnimationEasing);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Animation = function Animation() {
		  _classCallCheck(this, Animation);
		};
		
		exports.default = Animation;
		
		Animation.Easing = _UtilsAnimationEasing2.default;
	
	/***/ },
	/* 7 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * Different time animation functions
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Easing = function () {
		    function Easing() {
		        _classCallCheck(this, Easing);
		    }
		
		    Easing.isValidParams = function isValidParams(t, b, c, d, s) {
		        return typeof t === "number" && typeof b === "number" && typeof c === "number" && typeof d === "number" && (typeof s === "undefined" || typeof s === "number") && t < d;
		    };
		
		    Easing.swing = function swing(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return Easing[Easing.def](t, b, c, d);
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInQuad = function easeInQuad(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return c * (t /= d) * t + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeOutQuad = function easeOutQuad(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return -c * (t /= d) * (t - 2) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInOutQuad = function easeInOutQuad(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            if ((t /= d / 2) < 1) {
		                return c / 2 * t * t + b;
		            }
		            return -c / 2 * (--t * (t - 2) - 1) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInCubic = function easeInCubic(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return c * (t /= d) * t * t + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeOutCubic = function easeOutCubic(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return c * ((t = t / d - 1) * t * t + 1) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInOutCubic = function easeInOutCubic(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            if ((t /= d / 2) < 1) {
		                return c / 2 * t * t * t + b;
		            }
		            return c / 2 * ((t -= 2) * t * t + 2) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInQuart = function easeInQuart(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return c * (t /= d) * t * t * t + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeOutQuart = function easeOutQuart(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return -c * ((t = t / d - 1) * t * t * t - 1) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInOutQuart = function easeInOutQuart(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            if ((t /= d / 2) < 1) {
		                return c / 2 * t * t * t * t + b;
		            }
		            return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInQuint = function easeInQuint(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return c * (t /= d) * t * t * t * t + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeOutQuint = function easeOutQuint(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInOutQuint = function easeInOutQuint(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            if ((t /= d / 2) < 1) {
		                return c / 2 * t * t * t * t * t + b;
		            }
		            return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInSine = function easeInSine(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeOutSine = function easeOutSine(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return c * Math.sin(t / d * (Math.PI / 2)) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInOutSine = function easeInOutSine(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInExpo = function easeInExpo(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return t === 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeOutExpo = function easeOutExpo(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return t === d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInOutExpo = function easeInOutExpo(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            if (t === 0) {
		                return b;
		            }
		            if (t === d) {
		                return b + c;
		            }
		            if ((t /= d / 2) < 1) {
		                return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
		            }
		            return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInCirc = function easeInCirc(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeOutCirc = function easeOutCirc(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInOutCirc = function easeInOutCirc(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            if ((t /= d / 2) < 1) {
		                return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
		            }
		            return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInElastic = function easeInElastic(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            var s = 1.70158;
		            var p = 0;
		            var a = c;
		            if (t === 0) {
		                return b;
		            }
		            if ((t /= d) === 1) {
		                return b + c;
		            }
		            if (!p) {
		                p = d * .3;
		            }
		            if (a < Math.abs(c)) {
		                a = c;
		                s = p / 4;
		            } else {
		                s = p / (2 * Math.PI) * Math.asin(c / a);
		            }
		            return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeOutElastic = function easeOutElastic(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            var s = 1.70158;
		            var p = 0;
		            var a = c;
		            if (t === 0) {
		                return b;
		            }
		            if ((t /= d) === 1) {
		                return b + c;
		            }
		            if (!p) {
		                p = d * .3;
		            }
		            if (a < Math.abs(c)) {
		                a = c;
		                s = p / 4;
		            } else {
		                s = p / (2 * Math.PI) * Math.asin(c / a);
		            }
		            return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInOutElastic = function easeInOutElastic(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            var s = 1.70158;
		            var p = 0;
		            var a = c;
		            if (t === 0) {
		                return b;
		            }
		            if ((t /= d / 2) === 2) {
		                return b + c;
		            }
		            if (!p) {
		                p = d * (.3 * 1.5);
		            }
		            if (a < Math.abs(c)) {
		                a = c;
		                s = p / 4;
		            } else {
		                s = p / (2 * Math.PI) * Math.asin(c / a);
		            }
		            if (t < 1) {
		                return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
		            }
		            return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInBack = function easeInBack(t, b, c, d, s) {
		        if (Easing.isValidParams(t, b, c, d, s)) {
		            if (s === undefined) {
		                s = 1.70158;
		            }
		            return c * (t /= d) * t * ((s + 1) * t - s) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeOutBack = function easeOutBack(t, b, c, d, s) {
		        if (Easing.isValidParams(t, b, c, d, s)) {
		            if (s === undefined) {
		                s = 1.70158;
		            }
		            return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInOutBack = function easeInOutBack(t, b, c, d, s) {
		        if (Easing.isValidParams(t, b, c, d, s)) {
		            if (s === undefined) {
		                s = 1.70158;
		            }
		            if ((t /= d / 2) < 1) {
		                return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
		            }
		            return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInBounce = function easeInBounce(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            return c - Easing.easeOutBounce(d - t, 0, c, d) + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeOutBounce = function easeOutBounce(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            if ((t /= d) < 1 / 2.75) {
		                return c * (7.5625 * t * t) + b;
		            } else if (t < 2 / 2.75) {
		                return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;
		            } else if (t < 2.5 / 2.75) {
		                return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;
		            } else {
		                return c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;
		            }
		        } else {
		            return NaN;
		        }
		    };
		
		    Easing.easeInOutBounce = function easeInOutBounce(t, b, c, d) {
		        if (Easing.isValidParams(t, b, c, d)) {
		            if (t < d / 2) {
		                return Easing.easeInBounce(t * 2, 0, c, d) * .5 + b;
		            }
		            return Easing.easeOutBounce(t * 2 - d, 0, c, d) * .5 + c * .5 + b;
		        } else {
		            return NaN;
		        }
		    };
		
		    return Easing;
		}();
		
		exports.default = Easing;
		
		Easing.def = "easeOutQuad";
	
	/***/ },
	/* 8 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * Class for working with browser
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Browser = function () {
		    function Browser() {
		        _classCallCheck(this, Browser);
		    }
		
		    /**
		     * Get browser info
		     * @return {{browser: string, mobile: boolean, version: string}}
		     */
		    Browser.getInfo = function getInfo() {
		        return {
		            browser: Browser.getName(),
		            mobile: Browser.isMobile(),
		            version: Browser.getVersion()
		        };
		    };
		    /**
		     * Get browser name
		     * @return {string}
		     */
		
		
		    Browser.getName = function getName() {
		        var browser = void 0;
		        if (Browser.isOpera()) {
		            browser = "Opera";
		        } else if (Browser.isOperaNew()) {
		            browser = "Opera";
		        } else if (Browser.isMSIE()) {
		            browser = "Microsoft Internet Explorer";
		        } else if (Browser.isMSIENew()) {
		            browser = "Microsoft Internet Explorer";
		        } else if (Browser.isChrome()) {
		            browser = "Chrome";
		        } else if (Browser.isFirefox()) {
		            browser = "Firefox";
		        } else if (Browser.isSafari()) {
		            browser = "Safari";
		        } else if (Browser.isOther()) {
		            browser = Browser.getOtherName();
		        }
		        return browser;
		    };
		    /**
		     * Get browser version
		     * @return {string}
		     */
		
		
		    Browser.getVersion = function getVersion() {
		        var version = void 0;
		        if (Browser.isOpera()) {
		            version = Browser.getOperaVersion();
		        } else if (Browser.isOperaNew()) {
		            version = Browser.getOperaNewVersion();
		        } else if (Browser.isMSIE()) {
		            version = Browser.getMSIEVersion();
		        } else if (Browser.isMSIENew()) {
		            version = Browser.getMSIENewVersion();
		        } else if (Browser.isChrome()) {
		            version = Browser.getChromeVersion();
		        } else if (Browser.isFirefox()) {
		            version = Browser.getFirefoxVersion();
		        } else if (Browser.isSafari()) {
		            version = Browser.getSafariVersion();
		        } else if (Browser.isOther()) {
		            version = Browser.getOtherVersion();
		        }
		        return version;
		    };
		    /**
		     * Trim browser version
		     * @param version
		     * @return {string}
		     */
		
		
		    Browser.trimVersion = function trimVersion(version) {
		        if (typeof version === "string") {
		            var chars = [";", " ", ")"];
		            for (var _iterator = chars, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		                var _ref;
		
		                if (_isArray) {
		                    if (_i >= _iterator.length) break;
		                    _ref = _iterator[_i++];
		                } else {
		                    _i = _iterator.next();
		                    if (_i.done) break;
		                    _ref = _i.value;
		                }
		
		                var char = _ref;
		
		                var ix = version.indexOf(char);
		                if (ix !== -1) {
		                    version = version.substring(0, ix);
		                }
		            }
		            return version;
		        } else {
		            return "";
		        }
		    };
		    /**
		     * Check if it is mobile
		     * @return {boolean}
		     */
		
		
		    Browser.isMobile = function isMobile() {
		        return (/Mobile|mini|Fennec|Android|iP(ad|od|hone)/.test(navigator.appVersion)
		        );
		    };
		    /**
		     * Check if it is opera browser
		     * @return {boolean}
		     */
		
		
		    Browser.isOpera = function isOpera() {
		        return navigator.userAgent.indexOf("Opera") !== -1;
		    };
		    /**
		     * Get opera browser version
		     * @return {string}
		     */
		
		
		    Browser.getOperaVersion = function getOperaVersion() {
		        var verOffset = navigator.userAgent.indexOf("Opera");
		        var version = navigator.userAgent.substring(verOffset + 6);
		        verOffset = navigator.userAgent.indexOf("Version");
		        if (verOffset !== -1) {
		            version = navigator.userAgent.substring(verOffset + 8);
		        }
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is opera new browser
		     * @return {boolean}
		     */
		
		
		    Browser.isOperaNew = function isOperaNew() {
		        return navigator.userAgent.indexOf("OPR") !== -1;
		    };
		    /**
		     * Get opera new browser version
		     * @return {string}
		     */
		
		
		    Browser.getOperaNewVersion = function getOperaNewVersion() {
		        var verOffset = navigator.userAgent.indexOf("OPR");
		        var version = navigator.userAgent.substring(verOffset + 4);
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is msie browser
		     * @return {boolean}
		     */
		
		
		    Browser.isMSIE = function isMSIE() {
		        return navigator.userAgent.indexOf("MSIE") !== -1;
		    };
		    /**
		     * Get msie browser version
		     * @return {string}
		     */
		
		
		    Browser.getMSIEVersion = function getMSIEVersion() {
		        var verOffset = navigator.userAgent.indexOf("MSIE");
		        var version = navigator.userAgent.substring(verOffset + 5);
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is msie new browser
		     * @return {boolean}
		     */
		
		
		    Browser.isMSIENew = function isMSIENew() {
		        return navigator.userAgent.indexOf("Trident/") !== -1;
		    };
		    /**
		     * Get msie new browser version
		     * @return {string}
		     */
		
		
		    Browser.getMSIENewVersion = function getMSIENewVersion() {
		        var version = navigator.userAgent.substring(navigator.userAgent.indexOf("rv:") + 3);
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is chrome browser
		     * @return {boolean}
		     */
		
		
		    Browser.isChrome = function isChrome() {
		        return navigator.userAgent.indexOf("Chrome") !== -1;
		    };
		    /**
		     * Get chrome browser version
		     * @return {string}
		     */
		
		
		    Browser.getChromeVersion = function getChromeVersion() {
		        var verOffset = navigator.userAgent.indexOf("Chrome");
		        var version = navigator.userAgent.substring(verOffset + 7);
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is safari browser
		     * @return {boolean}
		     */
		
		
		    Browser.isSafari = function isSafari() {
		        return navigator.userAgent.indexOf("Safari") !== -1 && navigator.userAgent.indexOf("Chrome") === -1;
		    };
		    /**
		     * Get safari browser version
		     * @return {string}
		     */
		
		
		    Browser.getSafariVersion = function getSafariVersion() {
		        var verOffset = navigator.userAgent.indexOf("Safari");
		        var version = navigator.userAgent.substring(verOffset + 7);
		        verOffset = navigator.userAgent.indexOf("Version");
		        if (verOffset !== -1) {
		            version = navigator.userAgent.substring(verOffset + 8);
		        }
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is firefox browser
		     * @return {boolean}
		     */
		
		
		    Browser.isFirefox = function isFirefox() {
		        return navigator.userAgent.indexOf("Firefox") !== -1;
		    };
		    /**
		     * Get firefox browser version
		     * @return {string}
		     */
		
		
		    Browser.getFirefoxVersion = function getFirefoxVersion() {
		        var verOffset = navigator.userAgent.indexOf("Firefox");
		        var version = navigator.userAgent.substring(verOffset + 8);
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check if it is other browser
		     * @return {boolean}
		     */
		
		
		    Browser.isOther = function isOther() {
		        var nameOffset = navigator.userAgent.lastIndexOf(" ") + 1;
		        var verOffset = navigator.userAgent.lastIndexOf("/");
		        return nameOffset < verOffset;
		    };
		    /**
		     * Get other browser name
		     * @return {string}
		     */
		
		
		    Browser.getOtherName = function getOtherName() {
		        var nameOffset = navigator.userAgent.lastIndexOf(" ") + 1;
		        var verOffset = navigator.userAgent.lastIndexOf("/");
		        var browser = navigator.userAgent.substring(nameOffset, verOffset);
		        if (browser.toLowerCase() === browser.toUpperCase()) {
		            browser = navigator.appName;
		        }
		        return browser;
		    };
		    /**
		     * Get other browser version
		     * @return {string}
		     */
		
		
		    Browser.getOtherVersion = function getOtherVersion() {
		        var nameOffset = navigator.userAgent.lastIndexOf(" ") + 1;
		        var verOffset = navigator.userAgent.lastIndexOf("/");
		        var version = navigator.userAgent.substring(verOffset + 1);
		        return Browser.trimVersion(version);
		    };
		    /**
		     * Check browser support
		     * @return {boolean}
		     */
		
		
		    Browser.isSupported = function isSupported() {
		        return !Browser.isMSIE() || parseInt(Browser.getMSIEVersion(), 10) > 8;
		    };
		    /**
		     * Check if it is WebKit browser
		     * @return {boolean}
		     */
		
		
		    Browser.isWebKit = function isWebKit() {
		        return navigator.userAgent.indexOf("AppleWebKit/") !== -1;
		    };
		    /**
		     * Check if it is Gecko browser
		     * @return {boolean}
		     */
		
		
		    Browser.isGecko = function isGecko() {
		        return navigator.userAgent.indexOf("Gecko") > -1 && navigator.userAgent.indexOf("KHTML") === -1;
		    };
		    /**
		     * Check if it is Android browser
		     * @return {boolean}
		     */
		
		
		    Browser.isAndroid = function isAndroid() {
		        return navigator.userAgent.indexOf("Android") > -1;
		    };
		    /**
		     * Check if it is Linux browser
		     * @return {boolean}
		     */
		
		
		    Browser.isLinux = function isLinux() {
		        return navigator.userAgent.indexOf("Linux") > -1;
		    };
		    /**
		     * Check if it is iPad browser
		     * @return {boolean}
		     */
		
		
		    Browser.isTabletPC = function isTabletPC() {
		        return navigator.userAgent.indexOf("iPad") > -1;
		    };
		
		    return Browser;
		}();
		
		exports.default = Browser;
	
	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var URL = __webpack_require__(10);
		/**
		 * Class for working with cookie
		 */
		
		var Cookie = function () {
		  function Cookie() {
		    _classCallCheck(this, Cookie);
		  }
		
		  /**
		   * The method returns the flag whether supported this storage type or not
		   * @returns {boolean}
		   */
		  Cookie.isSupported = function isSupported() {
		    return (typeof document === "undefined" ? "undefined" : _typeof(document)) === "object" && typeof document.cookie === "string";
		  };
		  /**
		   * The method sets the value and returns true if it has been set
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @param value {string}
		   * @param expires {number}
		   * @param path {string}
		   * @param domain {string}
		   * @param secure {boolean}
		   * @return {boolean}
		   */
		
		
		  Cookie.setItem = function setItem(checkSupport, key, value) {
		    var expires = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;
		    var path = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "/";
		    var domain = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : location.hostname;
		    var secure = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : location.protocol === "https:";
		
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean" && typeof key === "string" && Cookie.regValidKey.test(key) && typeof value === "string" && typeof expires === "number" && expires < 365 && typeof path === "string" && typeof domain === "string" && domain.indexOf(location.hostname) !== -1 && typeof secure === "boolean" && secure === (location.protocol === "https:")) {
		        /**
		         * Validate input data
		         */
		        var u = URL.parse("http://" + domain + path);
		        if (u.hostname === domain || u.path === path) {
		          /**
		           * If that store is supported
		           */
		          if (!checkSupport || Cookie.isSupported()) {
		            /**
		             * Save cookies for 30 days
		             * @type {Date}
		             */
		            var date = new Date();
		            date.setTime(date.getTime() + expires * 24 * 60 * 60 * 1000);
		            var exp = date.toUTCString();
		            /**
		             * Encode value for store
		             * @type {string}
		             */
		            value = encodeURIComponent(value);
		            /**
		             * Writing value to the document cookie storage
		             * @type {string}
		             */
		            document.cookie = key + "=" + value + (exp ? "; expires=" + exp : "") + (path ? "; path=" + path : "") + (domain ? "; domain=" + domain : "") + (secure ? "; secure" : "");
		            /**
		             * If all ok return true
		             */
		            return Cookie.getItem(checkSupport, key) === value;
		          } else {
		            /**
		             * If cookie does not supported return false
		             */
		            return false;
		          }
		        } else {
		          /**
		           * If input data is not valid
		           */
		          return false;
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method reads the value and returns it or returns false if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {string|boolean}
		   */
		
		
		  Cookie.getItem = function getItem(checkSupport, key) {
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean" && typeof key === "string" && Cookie.regValidKey.test(key)) {
		        /**
		         * If that store is supported
		         */
		        if (!checkSupport || Cookie.isSupported()) {
		          /**
		           * Get the array from document cookie split by ;
		           * @type {string[]}
		           */
		          var arrCookie = document.cookie.split(";");
		          /**
		           * Iterate through the cookies
		           */
		          for (var _iterator = arrCookie, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		            var _ref;
		
		            if (_isArray) {
		              if (_i >= _iterator.length) break;
		              _ref = _iterator[_i++];
		            } else {
		              _i = _iterator.next();
		              if (_i.done) break;
		              _ref = _i.value;
		            }
		
		            var i = _ref;
		
		            /**
		             * Trim and split each cookie by = for key value pare
		             * @type {string[]}
		             */
		            var v = i.trim().split("=", 2);
		            /**
		             * If it is correct cookie key return the value
		             */
		            if (v[0] === key) {
		              /**
		               * If the value was found return the value
		               */
		              return decodeURIComponent(v[1]);
		            }
		          }
		          /**
		           * If the value was not found return false
		           */
		          return false;
		        } else {
		          /**
		           * If cookie does not supported return false
		           */
		          return false;
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method removes the value and return true if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {boolean}
		   */
		
		
		  Cookie.removeItem = function removeItem(checkSupport, key) {
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean" && typeof key === "string" && Cookie.regValidKey.test(key)) {
		        /**
		         * If that store is supported
		         */
		        if (!checkSupport || Cookie.isSupported()) {
		          /**
		           * Set empty overdue value by key
		           */
		          Cookie.setItem(checkSupport, key, "", -1);
		          /**
		           * If all ok return true
		           */
		          return Cookie.getItem(checkSupport, key) === false;
		        } else {
		          /**
		           * If cookie does not supported return false
		           */
		          return false;
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method returns the array of string of available keys
		   * @param checkSupport {boolean}
		   * @returns {string[]}
		   */
		
		
		  Cookie.getKeys = function getKeys(checkSupport) {
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean") {
		        /**
		         * If that store is supported
		         */
		        if (!checkSupport || Cookie.isSupported()) {
		          /**
		           * The array of available keys
		           * @type {Array}
		           */
		          var arrKeys = [];
		          /**
		           * Get the array from document cookie split by ;
		           * @type {string[]}
		           */
		          var arrCookie = document.cookie.split(";");
		          /**
		           * Iterate through the cookies
		           */
		          for (var _iterator2 = arrCookie, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
		            var _ref2;
		
		            if (_isArray2) {
		              if (_i2 >= _iterator2.length) break;
		              _ref2 = _iterator2[_i2++];
		            } else {
		              _i2 = _iterator2.next();
		              if (_i2.done) break;
		              _ref2 = _i2.value;
		            }
		
		            var i = _ref2;
		
		            /**
		             * Trim and split each cookie by = for key value pare
		             * @type {string[]}
		             */
		            var v = i.trim().split("=", 2);
		            /**
		             * Add key to the list
		             */
		            if (v[0]) {
		              arrKeys.push(v[0]);
		            }
		          }
		          return arrKeys;
		        } else {
		          /**
		           * If cookie does not supported return false
		           */
		          return [];
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        return [];
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return [];
		    }
		  };
		  /**
		   * The method cleans the storage and return true if it is empty
		   * @param checkSupport {boolean}
		   * @returns {boolean}
		   */
		
		
		  Cookie.clear = function clear(checkSupport) {
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean") {
		        /**
		         * If that store is supported
		         */
		        if (!checkSupport || Cookie.isSupported()) {
		          var arrKeys = Cookie.getKeys(checkSupport);
		          if (arrKeys) {
		            for (var _iterator3 = arrKeys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
		              var _ref3;
		
		              if (_isArray3) {
		                if (_i3 >= _iterator3.length) break;
		                _ref3 = _iterator3[_i3++];
		              } else {
		                _i3 = _iterator3.next();
		                if (_i3.done) break;
		                _ref3 = _i3.value;
		              }
		
		              var i = _ref3;
		
		              Cookie.removeItem(checkSupport, i);
		            }
		          }
		          /**
		           * If all ok return true
		           */
		          return Cookie.getKeys(checkSupport).length === 0;
		        } else {
		          /**
		           * If cookie does not supported return false
		           */
		          return true;
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		
		  return Cookie;
		}();
		
		exports.default = Cookie;
		
		Cookie.regValidKey = new RegExp("([a-zA-Z0-9_-]{1,})", "i");
	
	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {
	
		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.
		
		var punycode = __webpack_require__(11);
		
		exports.parse = urlParse;
		exports.resolve = urlResolve;
		exports.resolveObject = urlResolveObject;
		exports.format = urlFormat;
		
		exports.Url = Url;
		
		function Url() {
		  this.protocol = null;
		  this.slashes = null;
		  this.auth = null;
		  this.host = null;
		  this.port = null;
		  this.hostname = null;
		  this.hash = null;
		  this.search = null;
		  this.query = null;
		  this.pathname = null;
		  this.path = null;
		  this.href = null;
		}
		
		// Reference: RFC 3986, RFC 1808, RFC 2396
		
		// define these here so at least they only have to be
		// compiled once on the first module load.
		var protocolPattern = /^([a-z0-9.+-]+:)/i,
		    portPattern = /:[0-9]*$/,
		
		    // RFC 2396: characters reserved for delimiting URLs.
		    // We actually just auto-escape these.
		    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
		
		    // RFC 2396: characters not allowed for various reasons.
		    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
		
		    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
		    autoEscape = ['\''].concat(unwise),
		    // Characters that are never ever allowed in a hostname.
		    // Note that any invalid chars are also handled, but these
		    // are the ones that are *expected* to be seen, so we fast-path
		    // them.
		    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
		    hostEndingChars = ['/', '?', '#'],
		    hostnameMaxLen = 255,
		    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
		    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
		    // protocols that can allow "unsafe" and "unwise" chars.
		    unsafeProtocol = {
		      'javascript': true,
		      'javascript:': true
		    },
		    // protocols that never have a hostname.
		    hostlessProtocol = {
		      'javascript': true,
		      'javascript:': true
		    },
		    // protocols that always contain a // bit.
		    slashedProtocol = {
		      'http': true,
		      'https': true,
		      'ftp': true,
		      'gopher': true,
		      'file': true,
		      'http:': true,
		      'https:': true,
		      'ftp:': true,
		      'gopher:': true,
		      'file:': true
		    },
		    querystring = __webpack_require__(13);
		
		function urlParse(url, parseQueryString, slashesDenoteHost) {
		  if (url && isObject(url) && url instanceof Url) return url;
		
		  var u = new Url;
		  u.parse(url, parseQueryString, slashesDenoteHost);
		  return u;
		}
		
		Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
		  if (!isString(url)) {
		    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
		  }
		
		  var rest = url;
		
		  // trim before proceeding.
		  // This is to support parse stuff like "  http://foo.com  \n"
		  rest = rest.trim();
		
		  var proto = protocolPattern.exec(rest);
		  if (proto) {
		    proto = proto[0];
		    var lowerProto = proto.toLowerCase();
		    this.protocol = lowerProto;
		    rest = rest.substr(proto.length);
		  }
		
		  // figure out if it's got a host
		  // user@server is *always* interpreted as a hostname, and url
		  // resolution will treat //foo/bar as host=foo,path=bar because that's
		  // how the browser resolves relative URLs.
		  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
		    var slashes = rest.substr(0, 2) === '//';
		    if (slashes && !(proto && hostlessProtocol[proto])) {
		      rest = rest.substr(2);
		      this.slashes = true;
		    }
		  }
		
		  if (!hostlessProtocol[proto] &&
		      (slashes || (proto && !slashedProtocol[proto]))) {
		
		    // there's a hostname.
		    // the first instance of /, ?, ;, or # ends the host.
		    //
		    // If there is an @ in the hostname, then non-host chars *are* allowed
		    // to the left of the last @ sign, unless some host-ending character
		    // comes *before* the @-sign.
		    // URLs are obnoxious.
		    //
		    // ex:
		    // http://a@b@c/ => user:a@b host:c
		    // http://a@b?@c => user:a host:c path:/?@c
		
		    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
		    // Review our test case against browsers more comprehensively.
		
		    // find the first instance of any hostEndingChars
		    var hostEnd = -1;
		    for (var i = 0; i < hostEndingChars.length; i++) {
		      var hec = rest.indexOf(hostEndingChars[i]);
		      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
		        hostEnd = hec;
		    }
		
		    // at this point, either we have an explicit point where the
		    // auth portion cannot go past, or the last @ char is the decider.
		    var auth, atSign;
		    if (hostEnd === -1) {
		      // atSign can be anywhere.
		      atSign = rest.lastIndexOf('@');
		    } else {
		      // atSign must be in auth portion.
		      // http://a@b/c@d => host:b auth:a path:/c@d
		      atSign = rest.lastIndexOf('@', hostEnd);
		    }
		
		    // Now we have a portion which is definitely the auth.
		    // Pull that off.
		    if (atSign !== -1) {
		      auth = rest.slice(0, atSign);
		      rest = rest.slice(atSign + 1);
		      this.auth = decodeURIComponent(auth);
		    }
		
		    // the host is the remaining to the left of the first non-host char
		    hostEnd = -1;
		    for (var i = 0; i < nonHostChars.length; i++) {
		      var hec = rest.indexOf(nonHostChars[i]);
		      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
		        hostEnd = hec;
		    }
		    // if we still have not hit it, then the entire thing is a host.
		    if (hostEnd === -1)
		      hostEnd = rest.length;
		
		    this.host = rest.slice(0, hostEnd);
		    rest = rest.slice(hostEnd);
		
		    // pull out port.
		    this.parseHost();
		
		    // we've indicated that there is a hostname,
		    // so even if it's empty, it has to be present.
		    this.hostname = this.hostname || '';
		
		    // if hostname begins with [ and ends with ]
		    // assume that it's an IPv6 address.
		    var ipv6Hostname = this.hostname[0] === '[' &&
		        this.hostname[this.hostname.length - 1] === ']';
		
		    // validate a little.
		    if (!ipv6Hostname) {
		      var hostparts = this.hostname.split(/\./);
		      for (var i = 0, l = hostparts.length; i < l; i++) {
		        var part = hostparts[i];
		        if (!part) continue;
		        if (!part.match(hostnamePartPattern)) {
		          var newpart = '';
		          for (var j = 0, k = part.length; j < k; j++) {
		            if (part.charCodeAt(j) > 127) {
		              // we replace non-ASCII char with a temporary placeholder
		              // we need this to make sure size of hostname is not
		              // broken by replacing non-ASCII by nothing
		              newpart += 'x';
		            } else {
		              newpart += part[j];
		            }
		          }
		          // we test again with ASCII char only
		          if (!newpart.match(hostnamePartPattern)) {
		            var validParts = hostparts.slice(0, i);
		            var notHost = hostparts.slice(i + 1);
		            var bit = part.match(hostnamePartStart);
		            if (bit) {
		              validParts.push(bit[1]);
		              notHost.unshift(bit[2]);
		            }
		            if (notHost.length) {
		              rest = '/' + notHost.join('.') + rest;
		            }
		            this.hostname = validParts.join('.');
		            break;
		          }
		        }
		      }
		    }
		
		    if (this.hostname.length > hostnameMaxLen) {
		      this.hostname = '';
		    } else {
		      // hostnames are always lower case.
		      this.hostname = this.hostname.toLowerCase();
		    }
		
		    if (!ipv6Hostname) {
		      // IDNA Support: Returns a puny coded representation of "domain".
		      // It only converts the part of the domain name that
		      // has non ASCII characters. I.e. it dosent matter if
		      // you call it with a domain that already is in ASCII.
		      var domainArray = this.hostname.split('.');
		      var newOut = [];
		      for (var i = 0; i < domainArray.length; ++i) {
		        var s = domainArray[i];
		        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
		            'xn--' + punycode.encode(s) : s);
		      }
		      this.hostname = newOut.join('.');
		    }
		
		    var p = this.port ? ':' + this.port : '';
		    var h = this.hostname || '';
		    this.host = h + p;
		    this.href += this.host;
		
		    // strip [ and ] from the hostname
		    // the host field still retains them, though
		    if (ipv6Hostname) {
		      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
		      if (rest[0] !== '/') {
		        rest = '/' + rest;
		      }
		    }
		  }
		
		  // now rest is set to the post-host stuff.
		  // chop off any delim chars.
		  if (!unsafeProtocol[lowerProto]) {
		
		    // First, make 100% sure that any "autoEscape" chars get
		    // escaped, even if encodeURIComponent doesn't think they
		    // need to be.
		    for (var i = 0, l = autoEscape.length; i < l; i++) {
		      var ae = autoEscape[i];
		      var esc = encodeURIComponent(ae);
		      if (esc === ae) {
		        esc = escape(ae);
		      }
		      rest = rest.split(ae).join(esc);
		    }
		  }
		
		
		  // chop off from the tail first.
		  var hash = rest.indexOf('#');
		  if (hash !== -1) {
		    // got a fragment string.
		    this.hash = rest.substr(hash);
		    rest = rest.slice(0, hash);
		  }
		  var qm = rest.indexOf('?');
		  if (qm !== -1) {
		    this.search = rest.substr(qm);
		    this.query = rest.substr(qm + 1);
		    if (parseQueryString) {
		      this.query = querystring.parse(this.query);
		    }
		    rest = rest.slice(0, qm);
		  } else if (parseQueryString) {
		    // no query string, but parseQueryString still requested
		    this.search = '';
		    this.query = {};
		  }
		  if (rest) this.pathname = rest;
		  if (slashedProtocol[lowerProto] &&
		      this.hostname && !this.pathname) {
		    this.pathname = '/';
		  }
		
		  //to support http.request
		  if (this.pathname || this.search) {
		    var p = this.pathname || '';
		    var s = this.search || '';
		    this.path = p + s;
		  }
		
		  // finally, reconstruct the href based on what has been validated.
		  this.href = this.format();
		  return this;
		};
		
		// format a parsed object into a url string
		function urlFormat(obj) {
		  // ensure it's an object, and not a string url.
		  // If it's an obj, this is a no-op.
		  // this way, you can call url_format() on strings
		  // to clean up potentially wonky urls.
		  if (isString(obj)) obj = urlParse(obj);
		  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
		  return obj.format();
		}
		
		Url.prototype.format = function() {
		  var auth = this.auth || '';
		  if (auth) {
		    auth = encodeURIComponent(auth);
		    auth = auth.replace(/%3A/i, ':');
		    auth += '@';
		  }
		
		  var protocol = this.protocol || '',
		      pathname = this.pathname || '',
		      hash = this.hash || '',
		      host = false,
		      query = '';
		
		  if (this.host) {
		    host = auth + this.host;
		  } else if (this.hostname) {
		    host = auth + (this.hostname.indexOf(':') === -1 ?
		        this.hostname :
		        '[' + this.hostname + ']');
		    if (this.port) {
		      host += ':' + this.port;
		    }
		  }
		
		  if (this.query &&
		      isObject(this.query) &&
		      Object.keys(this.query).length) {
		    query = querystring.stringify(this.query);
		  }
		
		  var search = this.search || (query && ('?' + query)) || '';
		
		  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
		
		  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
		  // unless they had them to begin with.
		  if (this.slashes ||
		      (!protocol || slashedProtocol[protocol]) && host !== false) {
		    host = '//' + (host || '');
		    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
		  } else if (!host) {
		    host = '';
		  }
		
		  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
		  if (search && search.charAt(0) !== '?') search = '?' + search;
		
		  pathname = pathname.replace(/[?#]/g, function(match) {
		    return encodeURIComponent(match);
		  });
		  search = search.replace('#', '%23');
		
		  return protocol + host + pathname + search + hash;
		};
		
		function urlResolve(source, relative) {
		  return urlParse(source, false, true).resolve(relative);
		}
		
		Url.prototype.resolve = function(relative) {
		  return this.resolveObject(urlParse(relative, false, true)).format();
		};
		
		function urlResolveObject(source, relative) {
		  if (!source) return relative;
		  return urlParse(source, false, true).resolveObject(relative);
		}
		
		Url.prototype.resolveObject = function(relative) {
		  if (isString(relative)) {
		    var rel = new Url();
		    rel.parse(relative, false, true);
		    relative = rel;
		  }
		
		  var result = new Url();
		  Object.keys(this).forEach(function(k) {
		    result[k] = this[k];
		  }, this);
		
		  // hash is always overridden, no matter what.
		  // even href="" will remove it.
		  result.hash = relative.hash;
		
		  // if the relative url is empty, then there's nothing left to do here.
		  if (relative.href === '') {
		    result.href = result.format();
		    return result;
		  }
		
		  // hrefs like //foo/bar always cut to the protocol.
		  if (relative.slashes && !relative.protocol) {
		    // take everything except the protocol from relative
		    Object.keys(relative).forEach(function(k) {
		      if (k !== 'protocol')
		        result[k] = relative[k];
		    });
		
		    //urlParse appends trailing / to urls like http://www.example.com
		    if (slashedProtocol[result.protocol] &&
		        result.hostname && !result.pathname) {
		      result.path = result.pathname = '/';
		    }
		
		    result.href = result.format();
		    return result;
		  }
		
		  if (relative.protocol && relative.protocol !== result.protocol) {
		    // if it's a known url protocol, then changing
		    // the protocol does weird things
		    // first, if it's not file:, then we MUST have a host,
		    // and if there was a path
		    // to begin with, then we MUST have a path.
		    // if it is file:, then the host is dropped,
		    // because that's known to be hostless.
		    // anything else is assumed to be absolute.
		    if (!slashedProtocol[relative.protocol]) {
		      Object.keys(relative).forEach(function(k) {
		        result[k] = relative[k];
		      });
		      result.href = result.format();
		      return result;
		    }
		
		    result.protocol = relative.protocol;
		    if (!relative.host && !hostlessProtocol[relative.protocol]) {
		      var relPath = (relative.pathname || '').split('/');
		      while (relPath.length && !(relative.host = relPath.shift()));
		      if (!relative.host) relative.host = '';
		      if (!relative.hostname) relative.hostname = '';
		      if (relPath[0] !== '') relPath.unshift('');
		      if (relPath.length < 2) relPath.unshift('');
		      result.pathname = relPath.join('/');
		    } else {
		      result.pathname = relative.pathname;
		    }
		    result.search = relative.search;
		    result.query = relative.query;
		    result.host = relative.host || '';
		    result.auth = relative.auth;
		    result.hostname = relative.hostname || relative.host;
		    result.port = relative.port;
		    // to support http.request
		    if (result.pathname || result.search) {
		      var p = result.pathname || '';
		      var s = result.search || '';
		      result.path = p + s;
		    }
		    result.slashes = result.slashes || relative.slashes;
		    result.href = result.format();
		    return result;
		  }
		
		  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
		      isRelAbs = (
		          relative.host ||
		          relative.pathname && relative.pathname.charAt(0) === '/'
		      ),
		      mustEndAbs = (isRelAbs || isSourceAbs ||
		                    (result.host && relative.pathname)),
		      removeAllDots = mustEndAbs,
		      srcPath = result.pathname && result.pathname.split('/') || [],
		      relPath = relative.pathname && relative.pathname.split('/') || [],
		      psychotic = result.protocol && !slashedProtocol[result.protocol];
		
		  // if the url is a non-slashed url, then relative
		  // links like ../.. should be able
		  // to crawl up to the hostname, as well.  This is strange.
		  // result.protocol has already been set by now.
		  // Later on, put the first path part into the host field.
		  if (psychotic) {
		    result.hostname = '';
		    result.port = null;
		    if (result.host) {
		      if (srcPath[0] === '') srcPath[0] = result.host;
		      else srcPath.unshift(result.host);
		    }
		    result.host = '';
		    if (relative.protocol) {
		      relative.hostname = null;
		      relative.port = null;
		      if (relative.host) {
		        if (relPath[0] === '') relPath[0] = relative.host;
		        else relPath.unshift(relative.host);
		      }
		      relative.host = null;
		    }
		    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
		  }
		
		  if (isRelAbs) {
		    // it's absolute.
		    result.host = (relative.host || relative.host === '') ?
		                  relative.host : result.host;
		    result.hostname = (relative.hostname || relative.hostname === '') ?
		                      relative.hostname : result.hostname;
		    result.search = relative.search;
		    result.query = relative.query;
		    srcPath = relPath;
		    // fall through to the dot-handling below.
		  } else if (relPath.length) {
		    // it's relative
		    // throw away the existing file, and take the new path instead.
		    if (!srcPath) srcPath = [];
		    srcPath.pop();
		    srcPath = srcPath.concat(relPath);
		    result.search = relative.search;
		    result.query = relative.query;
		  } else if (!isNullOrUndefined(relative.search)) {
		    // just pull out the search.
		    // like href='?foo'.
		    // Put this after the other two cases because it simplifies the booleans
		    if (psychotic) {
		      result.hostname = result.host = srcPath.shift();
		      //occationaly the auth can get stuck only in host
		      //this especialy happens in cases like
		      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
		      var authInHost = result.host && result.host.indexOf('@') > 0 ?
		                       result.host.split('@') : false;
		      if (authInHost) {
		        result.auth = authInHost.shift();
		        result.host = result.hostname = authInHost.shift();
		      }
		    }
		    result.search = relative.search;
		    result.query = relative.query;
		    //to support http.request
		    if (!isNull(result.pathname) || !isNull(result.search)) {
		      result.path = (result.pathname ? result.pathname : '') +
		                    (result.search ? result.search : '');
		    }
		    result.href = result.format();
		    return result;
		  }
		
		  if (!srcPath.length) {
		    // no path at all.  easy.
		    // we've already handled the other stuff above.
		    result.pathname = null;
		    //to support http.request
		    if (result.search) {
		      result.path = '/' + result.search;
		    } else {
		      result.path = null;
		    }
		    result.href = result.format();
		    return result;
		  }
		
		  // if a url ENDs in . or .., then it must get a trailing slash.
		  // however, if it ends in anything else non-slashy,
		  // then it must NOT get a trailing slash.
		  var last = srcPath.slice(-1)[0];
		  var hasTrailingSlash = (
		      (result.host || relative.host) && (last === '.' || last === '..') ||
		      last === '');
		
		  // strip single dots, resolve double dots to parent dir
		  // if the path tries to go above the root, `up` ends up > 0
		  var up = 0;
		  for (var i = srcPath.length; i >= 0; i--) {
		    last = srcPath[i];
		    if (last == '.') {
		      srcPath.splice(i, 1);
		    } else if (last === '..') {
		      srcPath.splice(i, 1);
		      up++;
		    } else if (up) {
		      srcPath.splice(i, 1);
		      up--;
		    }
		  }
		
		  // if the path is allowed to go above the root, restore leading ..s
		  if (!mustEndAbs && !removeAllDots) {
		    for (; up--; up) {
		      srcPath.unshift('..');
		    }
		  }
		
		  if (mustEndAbs && srcPath[0] !== '' &&
		      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
		    srcPath.unshift('');
		  }
		
		  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
		    srcPath.push('');
		  }
		
		  var isAbsolute = srcPath[0] === '' ||
		      (srcPath[0] && srcPath[0].charAt(0) === '/');
		
		  // put the host back
		  if (psychotic) {
		    result.hostname = result.host = isAbsolute ? '' :
		                                    srcPath.length ? srcPath.shift() : '';
		    //occationaly the auth can get stuck only in host
		    //this especialy happens in cases like
		    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
		    var authInHost = result.host && result.host.indexOf('@') > 0 ?
		                     result.host.split('@') : false;
		    if (authInHost) {
		      result.auth = authInHost.shift();
		      result.host = result.hostname = authInHost.shift();
		    }
		  }
		
		  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
		
		  if (mustEndAbs && !isAbsolute) {
		    srcPath.unshift('');
		  }
		
		  if (!srcPath.length) {
		    result.pathname = null;
		    result.path = null;
		  } else {
		    result.pathname = srcPath.join('/');
		  }
		
		  //to support request.http
		  if (!isNull(result.pathname) || !isNull(result.search)) {
		    result.path = (result.pathname ? result.pathname : '') +
		                  (result.search ? result.search : '');
		  }
		  result.auth = relative.auth || result.auth;
		  result.slashes = result.slashes || relative.slashes;
		  result.href = result.format();
		  return result;
		};
		
		Url.prototype.parseHost = function() {
		  var host = this.host;
		  var port = portPattern.exec(host);
		  if (port) {
		    port = port[0];
		    if (port !== ':') {
		      this.port = port.substr(1);
		    }
		    host = host.substr(0, host.length - port.length);
		  }
		  if (host) this.hostname = host;
		};
		
		function isString(arg) {
		  return typeof arg === "string";
		}
		
		function isObject(arg) {
		  return typeof arg === 'object' && arg !== null;
		}
		
		function isNull(arg) {
		  return arg === null;
		}
		function isNullOrUndefined(arg) {
		  return  arg == null;
		}
	
	
	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
		;(function(root) {
		
			/** Detect free variables */
			var freeExports = typeof exports == 'object' && exports &&
				!exports.nodeType && exports;
			var freeModule = typeof module == 'object' && module &&
				!module.nodeType && module;
			var freeGlobal = typeof global == 'object' && global;
			if (
				freeGlobal.global === freeGlobal ||
				freeGlobal.window === freeGlobal ||
				freeGlobal.self === freeGlobal
			) {
				root = freeGlobal;
			}
		
			/**
			 * The `punycode` object.
			 * @name punycode
			 * @type Object
			 */
			var punycode,
		
			/** Highest positive signed 32-bit float value */
			maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
		
			/** Bootstring parameters */
			base = 36,
			tMin = 1,
			tMax = 26,
			skew = 38,
			damp = 700,
			initialBias = 72,
			initialN = 128, // 0x80
			delimiter = '-', // '\x2D'
		
			/** Regular expressions */
			regexPunycode = /^xn--/,
			regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
			regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
		
			/** Error messages */
			errors = {
				'overflow': 'Overflow: input needs wider integers to process',
				'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
				'invalid-input': 'Invalid input'
			},
		
			/** Convenience shortcuts */
			baseMinusTMin = base - tMin,
			floor = Math.floor,
			stringFromCharCode = String.fromCharCode,
		
			/** Temporary variable */
			key;
		
			/*--------------------------------------------------------------------------*/
		
			/**
			 * A generic error utility function.
			 * @private
			 * @param {String} type The error type.
			 * @returns {Error} Throws a `RangeError` with the applicable error message.
			 */
			function error(type) {
				throw RangeError(errors[type]);
			}
		
			/**
			 * A generic `Array#map` utility function.
			 * @private
			 * @param {Array} array The array to iterate over.
			 * @param {Function} callback The function that gets called for every array
			 * item.
			 * @returns {Array} A new array of values returned by the callback function.
			 */
			function map(array, fn) {
				var length = array.length;
				var result = [];
				while (length--) {
					result[length] = fn(array[length]);
				}
				return result;
			}
		
			/**
			 * A simple `Array#map`-like wrapper to work with domain name strings or email
			 * addresses.
			 * @private
			 * @param {String} domain The domain name or email address.
			 * @param {Function} callback The function that gets called for every
			 * character.
			 * @returns {Array} A new string of characters returned by the callback
			 * function.
			 */
			function mapDomain(string, fn) {
				var parts = string.split('@');
				var result = '';
				if (parts.length > 1) {
					// In email addresses, only the domain name should be punycoded. Leave
					// the local part (i.e. everything up to `@`) intact.
					result = parts[0] + '@';
					string = parts[1];
				}
				// Avoid `split(regex)` for IE8 compatibility. See #17.
				string = string.replace(regexSeparators, '\x2E');
				var labels = string.split('.');
				var encoded = map(labels, fn).join('.');
				return result + encoded;
			}
		
			/**
			 * Creates an array containing the numeric code points of each Unicode
			 * character in the string. While JavaScript uses UCS-2 internally,
			 * this function will convert a pair of surrogate halves (each of which
			 * UCS-2 exposes as separate characters) into a single code point,
			 * matching UTF-16.
			 * @see `punycode.ucs2.encode`
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode.ucs2
			 * @name decode
			 * @param {String} string The Unicode input string (UCS-2).
			 * @returns {Array} The new array of code points.
			 */
			function ucs2decode(string) {
				var output = [],
				    counter = 0,
				    length = string.length,
				    value,
				    extra;
				while (counter < length) {
					value = string.charCodeAt(counter++);
					if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
						// high surrogate, and there is a next character
						extra = string.charCodeAt(counter++);
						if ((extra & 0xFC00) == 0xDC00) { // low surrogate
							output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
						} else {
							// unmatched surrogate; only append this code unit, in case the next
							// code unit is the high surrogate of a surrogate pair
							output.push(value);
							counter--;
						}
					} else {
						output.push(value);
					}
				}
				return output;
			}
		
			/**
			 * Creates a string based on an array of numeric code points.
			 * @see `punycode.ucs2.decode`
			 * @memberOf punycode.ucs2
			 * @name encode
			 * @param {Array} codePoints The array of numeric code points.
			 * @returns {String} The new Unicode string (UCS-2).
			 */
			function ucs2encode(array) {
				return map(array, function(value) {
					var output = '';
					if (value > 0xFFFF) {
						value -= 0x10000;
						output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
						value = 0xDC00 | value & 0x3FF;
					}
					output += stringFromCharCode(value);
					return output;
				}).join('');
			}
		
			/**
			 * Converts a basic code point into a digit/integer.
			 * @see `digitToBasic()`
			 * @private
			 * @param {Number} codePoint The basic numeric code point value.
			 * @returns {Number} The numeric value of a basic code point (for use in
			 * representing integers) in the range `0` to `base - 1`, or `base` if
			 * the code point does not represent a value.
			 */
			function basicToDigit(codePoint) {
				if (codePoint - 48 < 10) {
					return codePoint - 22;
				}
				if (codePoint - 65 < 26) {
					return codePoint - 65;
				}
				if (codePoint - 97 < 26) {
					return codePoint - 97;
				}
				return base;
			}
		
			/**
			 * Converts a digit/integer into a basic code point.
			 * @see `basicToDigit()`
			 * @private
			 * @param {Number} digit The numeric value of a basic code point.
			 * @returns {Number} The basic code point whose value (when used for
			 * representing integers) is `digit`, which needs to be in the range
			 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
			 * used; else, the lowercase form is used. The behavior is undefined
			 * if `flag` is non-zero and `digit` has no uppercase form.
			 */
			function digitToBasic(digit, flag) {
				//  0..25 map to ASCII a..z or A..Z
				// 26..35 map to ASCII 0..9
				return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
			}
		
			/**
			 * Bias adaptation function as per section 3.4 of RFC 3492.
			 * http://tools.ietf.org/html/rfc3492#section-3.4
			 * @private
			 */
			function adapt(delta, numPoints, firstTime) {
				var k = 0;
				delta = firstTime ? floor(delta / damp) : delta >> 1;
				delta += floor(delta / numPoints);
				for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
					delta = floor(delta / baseMinusTMin);
				}
				return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
			}
		
			/**
			 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
			 * symbols.
			 * @memberOf punycode
			 * @param {String} input The Punycode string of ASCII-only symbols.
			 * @returns {String} The resulting string of Unicode symbols.
			 */
			function decode(input) {
				// Don't use UCS-2
				var output = [],
				    inputLength = input.length,
				    out,
				    i = 0,
				    n = initialN,
				    bias = initialBias,
				    basic,
				    j,
				    index,
				    oldi,
				    w,
				    k,
				    digit,
				    t,
				    /** Cached calculation results */
				    baseMinusT;
		
				// Handle the basic code points: let `basic` be the number of input code
				// points before the last delimiter, or `0` if there is none, then copy
				// the first basic code points to the output.
		
				basic = input.lastIndexOf(delimiter);
				if (basic < 0) {
					basic = 0;
				}
		
				for (j = 0; j < basic; ++j) {
					// if it's not a basic code point
					if (input.charCodeAt(j) >= 0x80) {
						error('not-basic');
					}
					output.push(input.charCodeAt(j));
				}
		
				// Main decoding loop: start just after the last delimiter if any basic code
				// points were copied; start at the beginning otherwise.
		
				for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
		
					// `index` is the index of the next character to be consumed.
					// Decode a generalized variable-length integer into `delta`,
					// which gets added to `i`. The overflow checking is easier
					// if we increase `i` as we go, then subtract off its starting
					// value at the end to obtain `delta`.
					for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
		
						if (index >= inputLength) {
							error('invalid-input');
						}
		
						digit = basicToDigit(input.charCodeAt(index++));
		
						if (digit >= base || digit > floor((maxInt - i) / w)) {
							error('overflow');
						}
		
						i += digit * w;
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
		
						if (digit < t) {
							break;
						}
		
						baseMinusT = base - t;
						if (w > floor(maxInt / baseMinusT)) {
							error('overflow');
						}
		
						w *= baseMinusT;
		
					}
		
					out = output.length + 1;
					bias = adapt(i - oldi, out, oldi == 0);
		
					// `i` was supposed to wrap around from `out` to `0`,
					// incrementing `n` each time, so we'll fix that now:
					if (floor(i / out) > maxInt - n) {
						error('overflow');
					}
		
					n += floor(i / out);
					i %= out;
		
					// Insert `n` at position `i` of the output
					output.splice(i++, 0, n);
		
				}
		
				return ucs2encode(output);
			}
		
			/**
			 * Converts a string of Unicode symbols (e.g. a domain name label) to a
			 * Punycode string of ASCII-only symbols.
			 * @memberOf punycode
			 * @param {String} input The string of Unicode symbols.
			 * @returns {String} The resulting Punycode string of ASCII-only symbols.
			 */
			function encode(input) {
				var n,
				    delta,
				    handledCPCount,
				    basicLength,
				    bias,
				    j,
				    m,
				    q,
				    k,
				    t,
				    currentValue,
				    output = [],
				    /** `inputLength` will hold the number of code points in `input`. */
				    inputLength,
				    /** Cached calculation results */
				    handledCPCountPlusOne,
				    baseMinusT,
				    qMinusT;
		
				// Convert the input in UCS-2 to Unicode
				input = ucs2decode(input);
		
				// Cache the length
				inputLength = input.length;
		
				// Initialize the state
				n = initialN;
				delta = 0;
				bias = initialBias;
		
				// Handle the basic code points
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue < 0x80) {
						output.push(stringFromCharCode(currentValue));
					}
				}
		
				handledCPCount = basicLength = output.length;
		
				// `handledCPCount` is the number of code points that have been handled;
				// `basicLength` is the number of basic code points.
		
				// Finish the basic string - if it is not empty - with a delimiter
				if (basicLength) {
					output.push(delimiter);
				}
		
				// Main encoding loop:
				while (handledCPCount < inputLength) {
		
					// All non-basic code points < n have been handled already. Find the next
					// larger one:
					for (m = maxInt, j = 0; j < inputLength; ++j) {
						currentValue = input[j];
						if (currentValue >= n && currentValue < m) {
							m = currentValue;
						}
					}
		
					// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
					// but guard against overflow
					handledCPCountPlusOne = handledCPCount + 1;
					if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
						error('overflow');
					}
		
					delta += (m - n) * handledCPCountPlusOne;
					n = m;
		
					for (j = 0; j < inputLength; ++j) {
						currentValue = input[j];
		
						if (currentValue < n && ++delta > maxInt) {
							error('overflow');
						}
		
						if (currentValue == n) {
							// Represent delta as a generalized variable-length integer
							for (q = delta, k = base; /* no condition */; k += base) {
								t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
								if (q < t) {
									break;
								}
								qMinusT = q - t;
								baseMinusT = base - t;
								output.push(
									stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
								);
								q = floor(qMinusT / baseMinusT);
							}
		
							output.push(stringFromCharCode(digitToBasic(q, 0)));
							bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
							delta = 0;
							++handledCPCount;
						}
					}
		
					++delta;
					++n;
		
				}
				return output.join('');
			}
		
			/**
			 * Converts a Punycode string representing a domain name or an email address
			 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
			 * it doesn't matter if you call it on a string that has already been
			 * converted to Unicode.
			 * @memberOf punycode
			 * @param {String} input The Punycoded domain name or email address to
			 * convert to Unicode.
			 * @returns {String} The Unicode representation of the given Punycode
			 * string.
			 */
			function toUnicode(input) {
				return mapDomain(input, function(string) {
					return regexPunycode.test(string)
						? decode(string.slice(4).toLowerCase())
						: string;
				});
			}
		
			/**
			 * Converts a Unicode string representing a domain name or an email address to
			 * Punycode. Only the non-ASCII parts of the domain name will be converted,
			 * i.e. it doesn't matter if you call it with a domain that's already in
			 * ASCII.
			 * @memberOf punycode
			 * @param {String} input The domain name or email address to convert, as a
			 * Unicode string.
			 * @returns {String} The Punycode representation of the given domain name or
			 * email address.
			 */
			function toASCII(input) {
				return mapDomain(input, function(string) {
					return regexNonASCII.test(string)
						? 'xn--' + encode(string)
						: string;
				});
			}
		
			/*--------------------------------------------------------------------------*/
		
			/** Define the public API */
			punycode = {
				/**
				 * A string representing the current Punycode.js version number.
				 * @memberOf punycode
				 * @type String
				 */
				'version': '1.3.2',
				/**
				 * An object of methods to convert from JavaScript's internal character
				 * representation (UCS-2) to Unicode code points, and back.
				 * @see <https://mathiasbynens.be/notes/javascript-encoding>
				 * @memberOf punycode
				 * @type Object
				 */
				'ucs2': {
					'decode': ucs2decode,
					'encode': ucs2encode
				},
				'decode': decode,
				'encode': encode,
				'toASCII': toASCII,
				'toUnicode': toUnicode
			};
		
			/** Expose `punycode` */
			// Some AMD build optimizers, like r.js, check for specific condition patterns
			// like the following:
			if (
				true
			) {
				!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
					return punycode;
				}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			} else if (freeExports && freeModule) {
				if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
					freeModule.exports = punycode;
				} else { // in Narwhal or RingoJS v0.7.0-
					for (key in punycode) {
						punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
					}
				}
			} else { // in Rhino or a web browser
				root.punycode = punycode;
			}
		
		}(this));
		
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12)(module), (function() { return this; }())))
	
	/***/ },
	/* 12 */
	/***/ function(module, exports) {
	
		module.exports = function(module) {
			if(!module.webpackPolyfill) {
				module.deprecate = function() {};
				module.paths = [];
				// module.parent = undefined by default
				module.children = [];
				module.webpackPolyfill = 1;
			}
			return module;
		}
	
	
	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		exports.decode = exports.parse = __webpack_require__(14);
		exports.encode = exports.stringify = __webpack_require__(15);
	
	
	/***/ },
	/* 14 */
	/***/ function(module, exports) {
	
		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.
		
		'use strict';
		
		// If obj.hasOwnProperty has been overridden, then calling
		// obj.hasOwnProperty(prop) will break.
		// See: https://github.com/joyent/node/issues/1707
		function hasOwnProperty(obj, prop) {
		  return Object.prototype.hasOwnProperty.call(obj, prop);
		}
		
		module.exports = function(qs, sep, eq, options) {
		  sep = sep || '&';
		  eq = eq || '=';
		  var obj = {};
		
		  if (typeof qs !== 'string' || qs.length === 0) {
		    return obj;
		  }
		
		  var regexp = /\+/g;
		  qs = qs.split(sep);
		
		  var maxKeys = 1000;
		  if (options && typeof options.maxKeys === 'number') {
		    maxKeys = options.maxKeys;
		  }
		
		  var len = qs.length;
		  // maxKeys <= 0 means that we should not limit keys count
		  if (maxKeys > 0 && len > maxKeys) {
		    len = maxKeys;
		  }
		
		  for (var i = 0; i < len; ++i) {
		    var x = qs[i].replace(regexp, '%20'),
		        idx = x.indexOf(eq),
		        kstr, vstr, k, v;
		
		    if (idx >= 0) {
		      kstr = x.substr(0, idx);
		      vstr = x.substr(idx + 1);
		    } else {
		      kstr = x;
		      vstr = '';
		    }
		
		    k = decodeURIComponent(kstr);
		    v = decodeURIComponent(vstr);
		
		    if (!hasOwnProperty(obj, k)) {
		      obj[k] = v;
		    } else if (Array.isArray(obj[k])) {
		      obj[k].push(v);
		    } else {
		      obj[k] = [obj[k], v];
		    }
		  }
		
		  return obj;
		};
	
	
	/***/ },
	/* 15 */
	/***/ function(module, exports) {
	
		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.
		
		'use strict';
		
		var stringifyPrimitive = function(v) {
		  switch (typeof v) {
		    case 'string':
		      return v;
		
		    case 'boolean':
		      return v ? 'true' : 'false';
		
		    case 'number':
		      return isFinite(v) ? v : '';
		
		    default:
		      return '';
		  }
		};
		
		module.exports = function(obj, sep, eq, name) {
		  sep = sep || '&';
		  eq = eq || '=';
		  if (obj === null) {
		    obj = undefined;
		  }
		
		  if (typeof obj === 'object') {
		    return Object.keys(obj).map(function(k) {
		      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
		      if (Array.isArray(obj[k])) {
		        return obj[k].map(function(v) {
		          return ks + encodeURIComponent(stringifyPrimitive(v));
		        }).join(sep);
		      } else {
		        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
		      }
		    }).join(sep);
		
		  }
		
		  if (!name) return '';
		  return encodeURIComponent(stringifyPrimitive(name)) + eq +
		         encodeURIComponent(stringifyPrimitive(obj));
		};
	
	
	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _UtilsWindow = __webpack_require__(17);
		
		var _UtilsWindow2 = _interopRequireDefault(_UtilsWindow);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		/**
		 * Class for working with document
		 */
		var Document = function () {
		    function Document() {
		        _classCallCheck(this, Document);
		    }
		
		    /**
		     * Get document height
		     * @returns {number}
		     */
		    Document.getHeight = function getHeight() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        if (_UtilsWindow2.default.isWindow(objWindow)) {
		            return Math.max(objWindow.document.body.scrollHeight, objWindow.document.documentElement.scrollHeight, objWindow.document.body.offsetHeight, objWindow.document.documentElement.offsetHeight, objWindow.document.body.clientHeight, objWindow.document.documentElement.clientHeight);
		        } else {
		            return NaN;
		        }
		    };
		    /**
		     * Get document width
		     * @returns {number}
		     */
		
		
		    Document.getWidth = function getWidth() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        if (_UtilsWindow2.default.isWindow(objWindow)) {
		            return Math.max(objWindow.document.body.scrollWidth, objWindow.document.documentElement.scrollWidth, objWindow.document.body.offsetWidth, objWindow.document.documentElement.offsetWidth, objWindow.document.body.clientWidth, objWindow.document.documentElement.clientWidth);
		        } else {
		            return NaN;
		        }
		    };
		    /**
		     * Get document top scroll
		     * @param objWindow
		     * @return {number}
		     */
		
		
		    Document.getScrollTop = function getScrollTop() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        if (_UtilsWindow2.default.isWindow(objWindow)) {
		            return objWindow.pageYOffset || objWindow.document.documentElement && objWindow.document.documentElement.scrollTop || objWindow.document.body && objWindow.document.body.scrollTop;
		        } else {
		            return NaN;
		        }
		    };
		    /**
		     * Get document left scroll
		     * @param objWindow
		     * @return {number}
		     */
		
		
		    Document.getScrollLeft = function getScrollLeft() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        if (_UtilsWindow2.default.isWindow(objWindow)) {
		            return objWindow.pageXOffset || objWindow.document.documentElement && objWindow.document.documentElement.scrollLeft || objWindow.document.body && objWindow.document.body.scrollLeft;
		        } else {
		            return NaN;
		        }
		    };
		    /**
		     * Get document scrolls
		     * @param objWindow
		     * @return {{left: number, top: number}}
		     */
		
		
		    Document.getScroll = function getScroll() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        if (_UtilsWindow2.default.isWindow(objWindow)) {
		            return {
		                left: Document.getScrollLeft(objWindow),
		                top: Document.getScrollTop(objWindow)
		            };
		        } else {
		            return {
		                left: NaN,
		                top: NaN
		            };
		        }
		    };
		
		    return Document;
		}();
		
		exports.default = Document;
	
	/***/ },
	/* 17 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * Class for working with window
		 */
		
		exports.__esModule = true;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Window = function () {
		    function Window() {
		        _classCallCheck(this, Window);
		    }
		
		    /**
		     * Check if it is window
		     * @param objWindow
		     * @return {boolean}
		     */
		    Window.isWindow = function isWindow(objWindow) {
		        return objWindow && (typeof objWindow === "undefined" ? "undefined" : _typeof(objWindow)) === "object" && objWindow.document && _typeof(objWindow.document) === "object";
		    };
		    /**
		     * Get window height
		     * @param objWindow
		     * @return {number}
		     */
		
		
		    Window.getHeight = function getHeight() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        if (Window.isWindow(objWindow)) {
		            return objWindow.innerHeight || objWindow.document.documentElement.clientHeight || objWindow.document.body.clientHeight;
		        } else {
		            return NaN;
		        }
		    };
		    /**
		     * Get window width
		     * @param objWindow
		     * @return {number}
		     */
		
		
		    Window.getWidth = function getWidth() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        if (Window.isWindow(objWindow)) {
		            return objWindow.innerWidth || objWindow.document.documentElement.clientWidth || objWindow.document.body.clientWidth;
		        } else {
		            return NaN;
		        }
		    };
		    /**
		     * Get window sizes
		     * @return {{height: number, width: number}}
		     */
		
		
		    Window.getSizes = function getSizes() {
		        var objWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
		
		        return {
		            height: Window.getHeight(objWindow),
		            width: Window.getWidth(objWindow)
		        };
		    };
		
		    return Window;
		}();
		
		exports.default = Window;
	
	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		var _Utils = __webpack_require__(5);
		
		var _Utils2 = _interopRequireDefault(_Utils);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		/**
		 * Class for working with DOM
		 */
		var DOM = function () {
		    function DOM() {
		        _classCallCheck(this, DOM);
		    }
		
		    /**
		     * Check if variable is dom document
		     * @param domDocument
		     * @return {boolean}
		     */
		    DOM.isDOMDocument = function isDOMDocument(domDocument) {
		        return !(!domDocument || typeof domDocument === "boolean" || typeof domDocument === "number" || typeof domDocument === "string" || domDocument.nodeType !== 9);
		    };
		    /**
		     * Find and validate Node in DOM Document
		     * @param domNode
		     * @param domDocument
		     * @return {Element | boolean}
		     */
		
		
		    DOM.getDOMNode = function getDOMNode(domNode) {
		        var domDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
		
		        /**
		         * Check if domDocument is a valid variable
		         */
		        if (!DOM.isDOMDocument(domDocument)) {
		            return false;
		        }
		        /**
		         * Check if domNode is a valid variable
		         */
		        if (!domNode || typeof domNode === "boolean" || typeof domNode === "number" || typeof domNode === "undefined") {
		            return false;
		        }
		        /**
		         * If domNode is a string it might be an ID
		         */
		        if (typeof domNode === "string") {
		            domNode = domDocument.getElementById(domNode);
		        }
		        /**
		         * Check if domNode is a valid variable
		         */
		        if (!domNode || domNode.nodeType !== 1 || !domNode.parentNode || domNode.parentNode.nodeName === "HTML" || !domDocument.contains(domNode)) {
		            return false;
		        }
		        return domNode;
		    };
		    /**
		     * Get element sizes and position
		     * @param domNode
		     * @param domDocument
		     * @param showForce
		     * @return {{bottom: number, height: number, left: number, right: number, top: number, width: number}}
		     */
		
		
		    DOM.getBoundingClientRect = function getBoundingClientRect(domNode) {
		        var domDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
		        var showForce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
		
		        /**
		         * Create result size and position object
		         */
		        var objRet = {
		            bottom: 0,
		            height: 0,
		            left: 0,
		            right: 0,
		            top: 0,
		            width: 0
		        };
		        domNode = DOM.getDOMNode(domNode, domDocument);
		        if (!domNode) {
		            _Utils2.default.warn("Utils.DOM.getBoundingClientRect: DOM element doesn't exist in that DOM Document");
		            return objRet;
		        }
		        showForce = !!showForce;
		        var styles = void 0;
		        if (showForce) {
		            styles = getComputedStyle(domNode);
		            if (styles && styles.display === "none") {
		                domNode.style.display = "block";
		            }
		        }
		        /**
		         * If default method is supported than use it
		         */
		        if (domNode.getBoundingClientRect) {
		            objRet = domNode.getBoundingClientRect();
		            /**
		             * IE hack
		             */
		            objRet = {
		                bottom: objRet.bottom,
		                height: objRet.height || domNode.clientHeight,
		                left: objRet.left,
		                right: objRet.right,
		                top: objRet.top,
		                width: objRet.width || domNode.clientWidth
		            };
		        } else {
		            /**
		             * Write the element in a temporary variable
		             */
		            var domElement = domNode;
		            /**
		             * Calculated basic parameters of the element
		             * @type {Object}
		             */
		            var objCoordinates = {
		                height: domElement.offsetHeight,
		                width: domElement.offsetWidth,
		                x: 0,
		                y: 0
		            };
		            /**
		             * Are passed on to all parents and take into account their offsets
		             */
		            while (domElement) {
		                objCoordinates.x += domElement.offsetLeft;
		                objCoordinates.y += domElement.offsetTop;
		                domElement = domElement.offsetParent;
		            }
		            /**
		             *
		             * @type {Object}
		             */
		            objRet = {
		                bottom: objCoordinates.y + objCoordinates.height,
		                height: objCoordinates.height,
		                left: objCoordinates.x,
		                right: objCoordinates.x + objCoordinates.width,
		                top: objCoordinates.y,
		                width: objCoordinates.width
		            };
		        }
		        if (showForce && domNode) {
		            domNode.style.display = "";
		        }
		        /**
		         * Return size and position of the element
		         */
		        return objRet;
		    };
		
		    /**
		     * Find element position
		     * @param domNode
		     * @param domDocument
		     * @param showForce
		     * @return {{top: number, left: number}}
		     */
		    DOM.findElementPosition = function findElementPosition(domNode) {
		        var domDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
		        var showForce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
		
		        var objRet = {
		            left: 0,
		            top: 0
		        };
		        domNode = DOM.getDOMNode(domNode, domDocument);
		        if (!domNode) {
		            _Utils2.default.warn("Utils.DOM.findElementPosition: DOM element doesn't exist in that DOM Document");
		            return objRet;
		        }
		        showForce = !!showForce;
		        while (domNode) {
		            var styles = void 0;
		            if (showForce) {
		                styles = window.getComputedStyle(domNode);
		                if (styles && styles.display === "none") {
		                    domNode.style.display = "block";
		                }
		            }
		            objRet.left += domNode.offsetLeft;
		            objRet.top += domNode.offsetTop;
		            domNode = domNode.offsetParent;
		            if (showForce && domNode) {
		                domNode.style.display = "";
		            }
		        }
		        return objRet;
		    };
		    /**
		     * Add event listener
		     * @param obj
		     * @param name
		     * @param func
		     */
		
		
		    DOM.addEvent = function addEvent(obj, name, func) {
		        if (obj && (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" && obj.nodeType === 1 && obj.parentElement && obj.parentElement.nodeName !== "HTML" && typeof name === "string" && typeof func === "function") {
		            if (obj.addEventListener) {
		                obj.addEventListener(name, func, false);
		            } else if (obj.attachEvent) {
		                obj.attachEvent("on" + name, func);
		            }
		            return true;
		        } else {
		            return false;
		        }
		    };
		    /**
		     * Remove event listener
		     * @param obj
		     * @param name
		     * @param func
		     */
		
		
		    DOM.removeEvent = function removeEvent(obj, name, func) {
		        if (obj && (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" && obj.nodeType === 1 && obj.parentElement && obj.parentElement.nodeName !== "HTML" && typeof name === "string" && typeof func === "function") {
		            if (obj.removeEventListener) {
		                obj.removeEventListener(name, func, false);
		            } else if (obj.detachEvent) {
		                obj.detachEvent("on" + name, func);
		            }
		            return true;
		        } else {
		            return false;
		        }
		    };
		    /**
		     * Check if element has class name
		     * @param element
		     * @param className
		     * @return {boolean}
		     */
		
		
		    DOM.hasClassName = function hasClassName(element, className) {
		        if (element && (typeof element === "undefined" ? "undefined" : _typeof(element)) === "object" && typeof className === "string" && element.nodeType === 1 && element.parentElement && element.parentElement.nodeName !== "HTML") {
		            className = className.trim();
		            return (" " + element.className + " ").indexOf(" " + className + " ") !== -1;
		        } else {
		            return false;
		        }
		    };
		    /**
		     * Add class name
		     * @param element
		     * @param className
		     * @return {HTMLElement}
		     */
		
		
		    DOM.addClassName = function addClassName(element, className) {
		        if (element && (typeof element === "undefined" ? "undefined" : _typeof(element)) === "object" && typeof className === "string" && element.nodeType === 1 && element.parentElement && element.parentElement.nodeName !== "HTML") {
		            className = className.trim();
		            if (!DOM.hasClassName(element, className)) {
		                var cl = element.className;
		                element.className = cl ? cl + " " + className : className;
		            }
		            return element;
		        } else {
		            return null;
		        }
		    };
		    /**
		     * Remove class name
		     * @param element
		     * @param className
		     * @return {HTMLElement}
		     */
		
		
		    DOM.removeClassName = function removeClassName(element, className) {
		        if (element && (typeof element === "undefined" ? "undefined" : _typeof(element)) === "object" && typeof className === "string" && element.nodeType === 1 && element.parentElement && element.parentElement.nodeName !== "HTML" && typeof element.className === "string") {
		            className = className.trim();
		            var classes = element.className.trim().split(" ");
		            for (var i = classes.length - 1; i >= 0; i--) {
		                classes[i] = classes[i].trim();
		                if (!classes[i] || classes[i] === className) {
		                    classes.splice(i, 1);
		                }
		            }
		            element.className = classes.join(" ");
		            return element;
		        } else {
		            return null;
		        }
		    };
		    /**
		     * Toggle class name
		     * @param element
		     * @param className
		     * @param toggle
		     * @return {HTMLElement}
		     */
		
		
		    DOM.toggleClassName = function toggleClassName(element, className, toggle) {
		        if (element && (typeof element === "undefined" ? "undefined" : _typeof(element)) === "object" && typeof className === "string" && typeof toggle === "boolean" && element.nodeType === 1 && element.parentElement && element.parentElement.nodeName !== "HTML") {
		            className = className.trim();
		            if (toggle) {
		                DOM.addClassName(element, className);
		            } else {
		                DOM.removeClassName(element, className);
		            }
		            return element;
		        } else {
		            return null;
		        }
		    };
		    /**
		     * Replace class name
		     * @param element
		     * @param oldClassName
		     * @param newClassName
		     * @return {HTMLElement}
		     */
		
		
		    DOM.replaceClass = function replaceClass(element, oldClassName, newClassName) {
		        if (element && (typeof element === "undefined" ? "undefined" : _typeof(element)) === "object" && typeof oldClassName === "string" && typeof newClassName === "string" && element.nodeType === 1 && element.parentElement && element.parentElement.nodeName !== "HTML") {
		            oldClassName = oldClassName.trim();
		            newClassName = newClassName.trim();
		            DOM.removeClassName(element, oldClassName);
		            DOM.addClassName(element, newClassName);
		            return element;
		        } else {
		            return null;
		        }
		    };
		    /**
		     * Get element by tag name and index
		     * @param tn
		     * @param domDocument
		     * @param index
		     * @return {Node}
		     */
		
		
		    DOM.getElementByTagName = function getElementByTagName(tn) {
		        var domDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
		        var index = arguments[2];
		
		        if (typeof tn === "string" && DOM.isDOMDocument(domDocument) && typeof index === "number") {
		            var els = domDocument.getElementsByTagName(tn);
		            return els[index] || null;
		        } else {
		            return null;
		        }
		    };
		    /**
		     * Get line height
		     * @return {number}
		     */
		
		
		    DOM.getLineHeight = function getLineHeight() {
		        var styles = getComputedStyle(document.body);
		        var lineHeight = styles.lineHeight;
		        var lineHeightDig = parseInt(lineHeight, 10);
		        var fontSize = styles.fontSize;
		        var fontSizeDig = parseInt(fontSize, 10);
		        if (isFinite(lineHeightDig)) {
		            return lineHeightDig;
		        } else {
		            return fontSizeDig;
		        }
		    };
		
		    return DOM;
		}();
		
		exports.default = DOM;
	
	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/**
		 * Import additional classes
		 */
		
		exports.__esModule = true;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		var _UtilsDOM = __webpack_require__(18);
		
		var _UtilsDOM2 = _interopRequireDefault(_UtilsDOM);
		
		var _UtilsWindow = __webpack_require__(17);
		
		var _UtilsWindow2 = _interopRequireDefault(_UtilsWindow);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Mouse = function () {
		    function Mouse() {
		        _classCallCheck(this, Mouse);
		    }
		
		    /**
		     * Normalise mouse delta
		     * @param e
		     * @return {number}
		     */
		    Mouse.getWheelDelta = function getWheelDelta(e) {
		        if (e && (typeof e === "undefined" ? "undefined" : _typeof(e)) === "object" && ("detail" in e || "wheelDelta" in e || "wheelDeltaY" in e || "wheelDeltaX" in e || "deltaY" in e || "deltaX" in e || "axis" in e || "deltaMode" in e)) {
		            var delta = void 0;
		            var deltaX = void 0;
		            var deltaY = void 0;
		            // Old school scrollwheel delta
		            if ("detail" in e) {
		                deltaY = e.detail * -1;
		            }
		            if ("wheelDelta" in e) {
		                deltaY = e.wheelDelta;
		            }
		            if ("wheelDeltaY" in e) {
		                deltaY = e.wheelDeltaY;
		            }
		            if ("wheelDeltaX" in e) {
		                deltaX = e.wheelDeltaX * -1;
		            }
		            // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
		            if ("axis" in e && e.axis === e.HORIZONTAL_AXIS) {
		                deltaX = deltaY * -1;
		                deltaY = 0;
		            }
		            // New school wheel delta (wheel event)
		            if ("deltaY" in e) {
		                deltaY = e.deltaY * -1;
		            }
		            if ("deltaX" in e) {
		                deltaX = e.deltaX;
		            }
		            // Need to convert lines and pages to pixels if we aren"t already in pixels
		            // There are three delta modes:
		            //   * deltaMode 0 is by pixels, nothing to do
		            //   * deltaMode 1 is by lines
		            //   * deltaMode 2 is by pages
		            if (e.deltaMode === 1) {
		                var lineHeight = _UtilsDOM2.default.getLineHeight();
		                deltaY = deltaY * lineHeight;
		                deltaX = deltaX * lineHeight;
		            } else if (e.deltaMode === 2) {
		                var windowhegiht = _UtilsWindow2.default.getHeight();
		                deltaY = deltaY * windowhegiht;
		                deltaX = deltaX * windowhegiht;
		            }
		            delta = deltaY === 0 ? deltaX : deltaY;
		            return delta;
		        } else {
		            return NaN;
		        }
		    };
		
		    return Mouse;
		}();
		
		exports.default = Mouse;
	
	/***/ },
	/* 20 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * Class for working with screen
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Screen = function () {
		    function Screen() {
		        _classCallCheck(this, Screen);
		    }
		
		    /**
		     * Get screen info
		     * @return {{availableSize: {height: number, width: number}, colorDepth: number, pixelRatio: number, size: {height: number, width: number}}}
		     */
		    Screen.getInfo = function getInfo() {
		        return {
		            availableSize: Screen.getAvailableSizes(),
		            colorDepth: Screen.getColorDepth(),
		            pixelRatio: Screen.getPixelRatio(),
		            size: Screen.getSizes()
		        };
		    };
		    /**
		     * Get screen height
		     * @returns {number}
		     */
		
		
		    Screen.getHeight = function getHeight() {
		        return screen.height;
		    };
		    /**
		     * Get screen width
		     * @returns {number}
		     */
		
		
		    Screen.getWidth = function getWidth() {
		        return screen.width;
		    };
		    /**
		     * Get screen sizes
		     * @return {{height: number, width: number}}
		     */
		
		
		    Screen.getSizes = function getSizes() {
		        return {
		            height: Screen.getHeight(),
		            width: Screen.getWidth()
		        };
		    };
		    /**
		     * Get screen height
		     * @returns {number}
		     */
		
		
		    Screen.getAvailableHeight = function getAvailableHeight() {
		        return screen.availHeight;
		    };
		    /**
		     * Get screen width
		     * @returns {number}
		     */
		
		
		    Screen.getAvailableWidth = function getAvailableWidth() {
		        return screen.availWidth;
		    };
		    /**
		     * Get screen sizes
		     * @return {{height: number, width: number}}
		     */
		
		
		    Screen.getAvailableSizes = function getAvailableSizes() {
		        return {
		            height: Screen.getAvailableHeight(),
		            width: Screen.getAvailableWidth()
		        };
		    };
		    /**
		     * Get screen pixel ratio
		     * @return {number}
		     */
		
		
		    Screen.getPixelRatio = function getPixelRatio() {
		        var ratio = 1;
		        if (typeof window.screen.systemXDPI !== "undefined" && typeof window.screen.logicalXDPI !== "undefined" && window.screen.systemXDPI > window.screen.logicalXDPI) {
		            ratio = window.screen.systemXDPI / window.screen.logicalXDPI;
		        } else if (typeof window.devicePixelRatio !== "undefined") {
		            ratio = window.devicePixelRatio;
		        }
		        return ratio;
		    };
		    /**
		     * Get screen color depth
		     * @return {number}
		     */
		
		
		    Screen.getColorDepth = function getColorDepth() {
		        return screen.colorDepth;
		    };
		
		    return Screen;
		}();
		
		exports.default = Screen;
	
	/***/ },
	/* 21 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * Class for working with system
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var System = function () {
		    function System() {
		        _classCallCheck(this, System);
		    }
		
		    /**
		     * Get system info
		     * @return {{name: string, version: string}}
		     */
		    System.getInfo = function getInfo() {
		        return {
		            name: System.getName(),
		            version: System.getVersion()
		        };
		    };
		    /**
		     * Get OS name
		     * @return {string}
		     */
		
		
		    System.getName = function getName() {
		        var os = "";
		        var clientStrings = [{
		            r: /(Windows 10.0|Windows NT 10.0)/,
		            s: "Windows 10"
		        }, {
		            r: /(Windows 8.1|Windows NT 6.3)/,
		            s: "Windows 8.1"
		        }, {
		            r: /(Windows 8|Windows NT 6.2)/,
		            s: "Windows 8"
		        }, {
		            r: /(Windows 7|Windows NT 6.1)/,
		            s: "Windows 7"
		        }, {
		            r: /Windows NT 6.0/,
		            s: "Windows Vista"
		        }, {
		            r: /Windows NT 5.2/,
		            s: "Windows Server 2003"
		        }, {
		            r: /(Windows NT 5.1|Windows XP)/,
		            s: "Windows XP"
		        }, {
		            r: /(Windows NT 5.0|Windows 2000)/,
		            s: "Windows 2000"
		        }, {
		            r: /(Win 9x 4.90|Windows ME)/,
		            s: "Windows ME"
		        }, {
		            r: /(Windows 98|Win98)/,
		            s: "Windows 98"
		        }, {
		            r: /(Windows 95|Win95|Windows_95)/,
		            s: "Windows 95"
		        }, {
		            r: /(Windows NT 4.0|WinNT4.0|WinNT|Windows NT)/,
		            s: "Windows NT 4.0"
		        }, {
		            r: /Windows CE/,
		            s: "Windows CE"
		        }, {
		            r: /Win16/,
		            s: "Windows 3.11"
		        }, {
		            r: /Android/,
		            s: "Android"
		        }, {
		            r: /OpenBSD/,
		            s: "Open BSD"
		        }, {
		            r: /SunOS/,
		            s: "Sun OS"
		        }, {
		            r: /(Linux|X11)/,
		            s: "Linux"
		        }, {
		            r: /(iPhone|iPad|iPod)/,
		            s: "iOS"
		        }, {
		            r: /Mac OS X/,
		            s: "Mac OS X"
		        }, {
		            r: /(MacPPC|MacIntel|Mac_PowerPC|Macintosh)/,
		            s: "Mac OS"
		        }, {
		            r: /QNX/,
		            s: "QNX"
		        }, {
		            r: /UNIX/,
		            s: "UNIX"
		        }, {
		            r: /BeOS/,
		            s: "BeOS"
		        }, {
		            r: /OS\/2/,
		            s: "OS/2"
		        }, {
		            r: /(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask Jeeves\/Teoma|ia_archiver)/,
		            s: "Search Bot"
		        }];
		        for (var _iterator = clientStrings, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		            var _ref;
		
		            if (_isArray) {
		                if (_i >= _iterator.length) break;
		                _ref = _iterator[_i++];
		            } else {
		                _i = _iterator.next();
		                if (_i.done) break;
		                _ref = _i.value;
		            }
		
		            var cs = _ref;
		
		            if (cs.r.test(navigator.userAgent)) {
		                os = cs.s;
		                break;
		            }
		        }
		        return os;
		    };
		    /**
		     * Get OS version
		     * @return {string}
		     */
		
		
		    System.getVersion = function getVersion() {
		        var os = System.getName();
		        var osVersion = "";
		        if (/Windows/.test(os)) {
		            osVersion = /Windows (.*)/.exec(os)[1];
		            os = "Windows";
		        }
		        switch (os) {
		            case "Mac OS X":
		                osVersion = /Mac OS X (10[._\d]+)/.exec(navigator.userAgent)[1];
		                break;
		            case "Android":
		                osVersion = /Android ([._\d]+)/.exec(navigator.userAgent)[1];
		                break;
		            case "iOS":
		                var reg = /OS (\d+)_(\d+)_?(\d+)?/.exec(navigator.appVersion);
		                osVersion = reg[1] + "." + reg[2] + "." + (reg[3] || 0);
		                break;
		            default:
		        }
		        return osVersion;
		    };
		
		    return System;
		}();
		
		exports.default = System;
	
	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/**
		 * Class for working with user
		 */
		
		exports.__esModule = true;
		
		var _UtilsBrowser = __webpack_require__(8);
		
		var _UtilsBrowser2 = _interopRequireDefault(_UtilsBrowser);
		
		var _UtilsScreen = __webpack_require__(20);
		
		var _UtilsScreen2 = _interopRequireDefault(_UtilsScreen);
		
		var _UtilsSystem = __webpack_require__(21);
		
		var _UtilsSystem2 = _interopRequireDefault(_UtilsSystem);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var User = function () {
		    function User() {
		        _classCallCheck(this, User);
		    }
		
		    /**
		     * Get user info
		     * @return {{browser: {browser: string, mobile: boolean, version: string}, screen: {availableSize: {height: number, width: number}, colorDepth: number, pixelRatio: number, size: {height: number, width: number}}, system: {name: string, version: string}}}
		     */
		    User.getInfo = function getInfo() {
		        return {
		            browser: _UtilsBrowser2.default.getInfo(),
		            screen: _UtilsScreen2.default.getInfo(),
		            system: _UtilsSystem2.default.getInfo()
		        };
		    };
		
		    return User;
		}();
		
		exports.default = User;
	
	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("EverCookie", [], factory);
		else if(typeof exports === 'object')
			exports["EverCookie"] = factory();
		else
			root["EverCookie"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		module.exports = __webpack_require__(5);
	
	
	/***/ },
	/* 1 */,
	/* 2 */,
	/* 3 */,
	/* 4 */,
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _AnimationFrame = __webpack_require__(6);
		
		var _AnimationFrame2 = _interopRequireDefault(_AnimationFrame);
		
		var _Cookies = __webpack_require__(7);
		
		var _Cookies2 = _interopRequireDefault(_Cookies);
		
		var _DOMStorage = __webpack_require__(14);
		
		var _DOMStorage2 = _interopRequireDefault(_DOMStorage);
		
		var _GlobalStorage = __webpack_require__(15);
		
		var _GlobalStorage2 = _interopRequireDefault(_GlobalStorage);
		
		var _LocalStorage = __webpack_require__(16);
		
		var _LocalStorage2 = _interopRequireDefault(_LocalStorage);
		
		var _SessionStorage = __webpack_require__(17);
		
		var _SessionStorage2 = _interopRequireDefault(_SessionStorage);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		/**
		 * Import storages
		 */
		
		
		/**
		 * EverCookie storage
		 */
		var EverCookie = function () {
		  /**
		   * The constructor should accept a hash to separate the scopes of storage
		   * @param hash {string}
		   */
		  function EverCookie(hash) {
		    _classCallCheck(this, EverCookie);
		
		    this.regValidKey = new RegExp("([a-zA-Z0-9_-]{0,})", "i");
		    /**
		     * Generate hash
		     * @type {string}
		     */
		    this.hash = hash || location.hostname;
		    /**
		     * Initialise stores
		     * @type {Array}
		     */
		    this.stores = [];
		    if (typeof _Cookies2.default !== "undefined") {
		      this.stores.push(new _Cookies2.default(this.hash));
		    }
		    if (typeof _GlobalStorage2.default !== "undefined") {
		      this.stores.push(new _GlobalStorage2.default(this.hash));
		    }
		    if (typeof _LocalStorage2.default !== "undefined") {
		      this.stores.push(new _LocalStorage2.default(this.hash));
		    }
		    if (typeof _SessionStorage2.default !== "undefined") {
		      this.stores.push(new _SessionStorage2.default(this.hash));
		    }
		    if (typeof _DOMStorage2.default !== "undefined") {
		      this.stores.push(new _DOMStorage2.default(this.hash));
		    }
		    for (var i = 0; i < this.stores.length; i++) {
		      if (!this.stores[i].isSupported()) {
		        this.stores.splice(i, 1);
		      }
		    }
		    /**
		     * Set self refresh flag
		     * @type {boolean}
		     */
		    this.stopRefresh = false;
		    /**
		     * Self refresh
		     */
		    if (this.isSupported()) {
		      this.refreshID = _AnimationFrame2.default.subscribe(this, this.refresh, []);
		    }
		  }
		  /**
		   * The method returns the flag whether supported this storage type or not
		   * @returns {boolean}
		   */
		
		
		  EverCookie.prototype.isSupported = function isSupported() {
		    return this.stores && this.stores.length > 0;
		  };
		  /**
		   * The method sets the value and returns true if it has been set
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @param value {string}
		   * @returns {boolean}
		   */
		
		
		  EverCookie.prototype.setItem = function setItem() {
		    var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		    var key = arguments[1];
		    var value = arguments[2];
		
		    /**
		     * Set result flag as true
		     * @type {boolean}
		     */
		    var booResult = true;
		    /**
		     * Stop self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = true;
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key) && typeof value === "string" && (value === "" || this.regValidKey.test(value))) {
		        /**
		         * If that store is supported
		         */
		        if (!checkSupport || this.isSupported()) {
		          /**
		           * Initialise store result array
		           * @type {Array}
		           */
		          var arResults = [];
		          /**
		           * Iterate through all supported stores
		           */
		          for (var _iterator = this.stores, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		            var _ref;
		
		            if (_isArray) {
		              if (_i >= _iterator.length) break;
		              _ref = _iterator[_i++];
		            } else {
		              _i = _iterator.next();
		              if (_i.done) break;
		              _ref = _i.value;
		            }
		
		            var store = _ref;
		
		            /**
		             * Write store operation result to result array
		             */
		            arResults.push(store.setItem(false, key, value));
		          }
		          /**
		           * If there exist result and one of them is true, it is means, that value was set
		           * @type {boolean}
		           */
		          booResult = arResults.length > 0 && arResults.indexOf(true) !== -1;
		        } else {
		          /**
		           * If stores does not supported, value can be set
		           * @type {boolean}
		           */
		          booResult = false;
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        booResult = false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong, value can be set
		       * @type {boolean}
		       */
		      booResult = false;
		    }
		    /**
		     * Start self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = false;
		    /**
		     * Return set item status
		     */
		    return booResult;
		  };
		  /**
		   * The method reads the value and returns it or returns false if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {string|boolean}
		   */
		
		
		  EverCookie.prototype.getItem = function getItem() {
		    var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		    var key = arguments[1];
		
		    /**
		     * Set result flag as true
		     * @type {boolean|string}
		     */
		    var booResult = false;
		    /**
		     * Stop self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = true;
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key)) {
		        /**
		         * If that store is supported
		         */
		        if (!checkSupport || this.isSupported()) {
		          /**
		           * Initialise temporary store result array
		           * @type {string[]}
		           */
		          var localArrResults = [];
		          /**
		           * Iterate through all supported stores
		           */
		          for (var _iterator2 = this.stores, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
		            var _ref2;
		
		            if (_isArray2) {
		              if (_i2 >= _iterator2.length) break;
		              _ref2 = _iterator2[_i2++];
		            } else {
		              _i2 = _iterator2.next();
		              if (_i2.done) break;
		              _ref2 = _i2.value;
		            }
		
		            var store = _ref2;
		
		            var value = store.getItem(false, key);
		            /**
		             * If store has this value
		             */
		            if (value) {
		              /**
		               * Write store operation result to result array
		               */
		              localArrResults.push(value);
		            }
		          }
		          /**
		           * Initialise store result array
		           * @type {Object}
		           */
		          var arResults = {};
		          var numMax = 0;
		          /**
		           * Looking for the most frequently mentioned result
		           */
		          for (var _iterator3 = localArrResults, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
		            var _ref3;
		
		            if (_isArray3) {
		              if (_i3 >= _iterator3.length) break;
		              _ref3 = _iterator3[_i3++];
		            } else {
		              _i3 = _iterator3.next();
		              if (_i3.done) break;
		              _ref3 = _i3.value;
		            }
		
		            var i = _ref3;
		
		            if (!arResults[i]) {
		              arResults[i] = 0;
		            }
		            arResults[i]++;
		            if (arResults[i] > numMax) {
		              numMax = arResults[i];
		              booResult = i;
		            }
		          }
		        } else {
		          /**
		           * If stores does not supported, value can be set
		           * @type {boolean}
		           */
		          booResult = false;
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        booResult = false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong, value can be set
		       * @type {boolean}
		       */
		      booResult = false;
		    }
		    /**
		     * Start self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = false;
		    /**
		     * Return set item status
		     */
		    return booResult;
		  };
		  /**
		   * The method removes the value and return true if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {boolean}
		   */
		
		
		  EverCookie.prototype.removeItem = function removeItem() {
		    var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		    var key = arguments[1];
		
		    /**
		     * Set result flag as true
		     * @type {boolean}
		     */
		    var booResult = true;
		    /**
		     * Stop self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = true;
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key)) {
		        /**
		         * If that store is supported
		         */
		        if (!checkSupport || this.isSupported()) {
		          /**
		           * Initialise store result counter
		           * @type {number}
		           */
		          var arResult = 0;
		          /**
		           * Iterate through all supported stores
		           */
		          for (var _iterator4 = this.stores, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
		            var _ref4;
		
		            if (_isArray4) {
		              if (_i4 >= _iterator4.length) break;
		              _ref4 = _iterator4[_i4++];
		            } else {
		              _i4 = _iterator4.next();
		              if (_i4.done) break;
		              _ref4 = _i4.value;
		            }
		
		            var store = _ref4;
		
		            /**
		             * If store supported (Not required, the stores is checked during initialization)
		             */
		            arResult += 1 * store.removeItem(false, key);
		          }
		          /**
		           * If removed count equal to stores count
		           * @type {boolean}
		           */
		          booResult = arResult === this.stores.length;
		        } else {
		          /**
		           * If stores does not supported, value can be set
		           * @type {boolean}
		           */
		          booResult = false;
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        booResult = false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong, value can be set
		       * @type {boolean}
		       */
		      booResult = false;
		    }
		    /**
		     * Start self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = false;
		    /**
		     * Return set item status
		     */
		    return booResult;
		  };
		  /**
		   * The method returns the array of string of available keys
		   * @param checkSupport {boolean}
		   * @returns {string[]}
		   */
		
		
		  EverCookie.prototype.getKeys = function getKeys() {
		    var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		
		    /**
		     * Set result flag as true
		     * @type {Object}
		     */
		    var booResult = {};
		    /**
		     * Stop self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = true;
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean") {
		        /**
		         * If that store is supported
		         */
		        if (!checkSupport || this.isSupported()) {
		          /**
		           * Iterate through all supported stores
		           */
		          for (var _iterator5 = this.stores, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
		            var _ref5;
		
		            if (_isArray5) {
		              if (_i5 >= _iterator5.length) break;
		              _ref5 = _iterator5[_i5++];
		            } else {
		              _i5 = _iterator5.next();
		              if (_i5.done) break;
		              _ref5 = _i5.value;
		            }
		
		            var store = _ref5;
		
		            var value = store.getKeys(false);
		            if (value.length > 0) {
		              for (var _iterator6 = value, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
		                var _ref6;
		
		                if (_isArray6) {
		                  if (_i6 >= _iterator6.length) break;
		                  _ref6 = _iterator6[_i6++];
		                } else {
		                  _i6 = _iterator6.next();
		                  if (_i6.done) break;
		                  _ref6 = _i6.value;
		                }
		
		                var i = _ref6;
		
		                booResult[i] = true;
		              }
		            }
		          }
		        } else {
		          /**
		           * If stores does not supported, value can be set
		           * @type {Object}
		           */
		          booResult = {};
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        booResult = {};
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong, value can be set
		       * @type {Object}
		       */
		      booResult = {};
		    }
		    /**
		     * Start self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = false;
		    /**
		     * Return set item status
		     */
		    return Object.keys(booResult);
		  };
		  /**
		   * The method cleans the storage and return true if it is empty
		   * @param checkSupport {boolean}
		   * @returns {boolean}
		   */
		
		
		  EverCookie.prototype.clear = function clear() {
		    var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		
		    /**
		     * Set result flag as true
		     * @type {boolean}
		     */
		    var booResult = true;
		    /**
		     * Stop self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = true;
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean") {
		        /**
		         * If that store is supported
		         */
		        if (!checkSupport || this.isSupported()) {
		          /**
		           * Initialise store result counter
		           * @type {number}
		           */
		          var arResult = 0;
		          /**
		           * Iterate through all supported stores
		           */
		          for (var _iterator7 = this.stores, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
		            var _ref7;
		
		            if (_isArray7) {
		              if (_i7 >= _iterator7.length) break;
		              _ref7 = _iterator7[_i7++];
		            } else {
		              _i7 = _iterator7.next();
		              if (_i7.done) break;
		              _ref7 = _i7.value;
		            }
		
		            var store = _ref7;
		
		            arResult += 1 * store.clear(false);
		          }
		          /**
		           * If removed count equal to stores count
		           * @type {boolean}
		           */
		          booResult = arResult === this.stores.length;
		        } else {
		          /**
		           * If stores does not supported, value can be set
		           * @type {boolean}
		           */
		          booResult = false;
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        booResult = false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong, value can be set
		       * @type {boolean}
		       */
		      booResult = false;
		    }
		    /**
		     * Start self refresh process
		     * @type {boolean}
		     */
		    this.stopRefresh = false;
		    /**
		     * Return set item status
		     */
		    return booResult;
		  };
		  /**
		   * Self refresh
		   */
		
		
		  EverCookie.prototype.refresh = function refresh() {
		    if (!this.stopRefresh) {
		      var arrKeys = this.getKeys(false);
		      for (var _iterator8 = arrKeys, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {
		        var _ref8;
		
		        if (_isArray8) {
		          if (_i8 >= _iterator8.length) break;
		          _ref8 = _iterator8[_i8++];
		        } else {
		          _i8 = _iterator8.next();
		          if (_i8.done) break;
		          _ref8 = _i8.value;
		        }
		
		        var key = _ref8;
		
		        var value = this.getItem(false, key);
		        /**
		         * Iterate through all supported stores
		         */
		        for (var _iterator9 = this.stores, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
		          var _ref9;
		
		          if (_isArray9) {
		            if (_i9 >= _iterator9.length) break;
		            _ref9 = _iterator9[_i9++];
		          } else {
		            _i9 = _iterator9.next();
		            if (_i9.done) break;
		            _ref9 = _i9.value;
		          }
		
		          var store = _ref9;
		
		          if (value !== store.getItem(false, key)) {
		            store.setItem(false, key, value.toString());
		          }
		        }
		      }
		    }
		  };
		  /**
		   * Stop every cookie
		   */
		
		
		  EverCookie.prototype.destroy = function destroy() {
		    _AnimationFrame2.default.unsubscribe(this.refreshID);
		    this.stopRefresh = true;
		    this.refresh = function () {
		      return null;
		    };
		    this.stores = [];
		    return true;
		  };
		
		  return EverCookie;
		}();
		
		exports.default = EverCookie;
		
		module.exports = EverCookie;
	
	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {
	
		(function webpackUniversalModuleDefinition(root, factory) {
			if(true)
				module.exports = factory();
			else if(typeof define === 'function' && define.amd)
				define("AnimationFrame", [], factory);
			else if(typeof exports === 'object')
				exports["AnimationFrame"] = factory();
			else
				root["AnimationFrame"] = factory();
		})(this, function() {
		return /******/ (function(modules) { // webpackBootstrap
		/******/ 	// The module cache
		/******/ 	var installedModules = {};
		/******/
		/******/ 	// The require function
		/******/ 	function __webpack_require__(moduleId) {
		/******/
		/******/ 		// Check if module is in cache
		/******/ 		if(installedModules[moduleId])
		/******/ 			return installedModules[moduleId].exports;
		/******/
		/******/ 		// Create a new module (and put it into the cache)
		/******/ 		var module = installedModules[moduleId] = {
		/******/ 			exports: {},
		/******/ 			id: moduleId,
		/******/ 			loaded: false
		/******/ 		};
		/******/
		/******/ 		// Execute the module function
		/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
		/******/
		/******/ 		// Flag the module as loaded
		/******/ 		module.loaded = true;
		/******/
		/******/ 		// Return the exports of the module
		/******/ 		return module.exports;
		/******/ 	}
		/******/
		/******/
		/******/ 	// expose the modules object (__webpack_modules__)
		/******/ 	__webpack_require__.m = modules;
		/******/
		/******/ 	// expose the module cache
		/******/ 	__webpack_require__.c = installedModules;
		/******/
		/******/ 	// __webpack_public_path__
		/******/ 	__webpack_require__.p = "";
		/******/
		/******/ 	// Load entry module and return exports
		/******/ 	return __webpack_require__(0);
		/******/ })
		/************************************************************************/
		/******/ ({
		
		/***/ 0:
		/***/ function(module, exports, __webpack_require__) {
		
			module.exports = __webpack_require__(5);
		
		
		/***/ },
		
		/***/ 5:
		/***/ function(module, exports) {
		
			/* WEBPACK VAR INJECTION */(function(global) {"use strict";
			
			exports.__esModule = true;
			
			var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
			
			function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
			
			var root = void 0;
			if (typeof window === "undefined") {
			    if (typeof global !== "undefined") {
			        root = global;
			    } else {
			        root = {};
			    }
			} else {
			    root = window;
			}
			/**
			 * requestAnimationFrame polyfill
			 */
			root.requestAnimationFrame = function () {
			    return typeof root !== "undefined" && (root.requestAnimationFrame || root.webkitRequestAnimationFrame || root.mozRequestAnimationFrame || root.oRequestAnimationFrame || root.msRequestAnimationFrame) || function (callback) {
			        root.setTimeout(callback, 1000 / 60);
			    };
			}();
			/**
			 * Bind polyfill
			 */
			function bind(b) {
			    /**
			     * If try bind variable that not a function, then throw error
			     */
			    if (typeof this !== "function") {
			        throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
			    }
			    /**
			     * let Array slice function
			     */
			    var a = Array.prototype.slice;
			    var f = a.call(arguments, 1);
			    var e = this;
			    function c() {
			        /*
			         if (
			         typeof root !== "undefined" &&
			         typeof root.console === "object" &&
			         typeof root.console.log === "function"
			         ) {
			         root.console.log("Bind polyfill");
			         }
			         */
			    }
			    function d() {
			        return e.apply(this instanceof c ? this : b || root, f.concat(a.call(arguments)));
			    }
			    /**
			     * Registered this prototype as prototype to bind implementation functions
			     */
			    c.prototype = this.prototype;
			    d.prototype = new c();
			    /**
			     * Return bind polyfill
			     */
			    return d;
			}
			Function.prototype.bind = Function.prototype.bind || bind;
			/**
			 * Object.keys polyfill
			 */
			function keys() {
			    var hasDoNotEnumBug = !{ toString: null }.propertyIsEnumerable("toString");
			    var doNotEnums = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"];
			    var doNotEnumsLength = doNotEnums.length;
			    return function (obj) {
			        if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) !== "object" && (typeof obj !== "function" || obj === null)) {
			            throw new TypeError("Object.keys called on non-object");
			        }
			        var result = [];
			        for (var prop in obj) {
			            if (Object.prototype.hasOwnProperty.call(obj, prop)) {
			                result.push(prop);
			            }
			        }
			        if (hasDoNotEnumBug) {
			            for (var i = 0; i < doNotEnumsLength; i++) {
			                if (Object.prototype.hasOwnProperty.call(obj, doNotEnums[i])) {
			                    result.push(doNotEnums[i]);
			                }
			            }
			        }
			        return result;
			    };
			}
			Object.keys = Object.keys || keys();
			/**
			 * Request animation frame call stack class
			 */
			
			var AnimationFrame = function () {
			    /**
			     * Create request animation frame
			     */
			    function AnimationFrame() {
			        _classCallCheck(this, AnimationFrame);
			
			        /**
			         * Subscribed methods
			         */
			        this.stack = {};
			        /**
			         * Start requestAnimationFrame watcher
			         */
			        this.watch();
			    }
			    /**
			     * Subscribe method to watch
			     * @param context
			     * @param callback
			     * @param params
			     * @param ID
			     * @return {boolean|string}
			     */
			
			
			    AnimationFrame.prototype.subscribe = function subscribe() {
			        var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : root;
			        var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {
			            return null;
			        };
			        var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
			        var ID = arguments[3];
			
			        /**
			         * If context and callback passed and they are object and function
			         */
			        if ((typeof context === "undefined" ? "undefined" : _typeof(context)) === "object" && typeof callback === "function" && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object" && Array.isArray(params) && (ID === undefined || typeof ID === "string")) {
			            /**
			             * Create UID
			             */
			            var d = new Date();
			            var localID = ID || "x-" + d.getTime() + "-" + Math.round(Math.random() * 1e6);
			            /**
			             * Add method to the stack
			             */
			            this.stack[localID] = {
			                context: context,
			                callback: callback,
			                params: params
			            };
			            /**
			             * Write to console count of the subscribed methods
			             */
			            /**
			             * Return UID
			             */
			            return localID;
			        } else {
			            return false;
			        }
			    };
			    /**
			     * Unsubscribe method by ID
			     * @param ID
			     */
			
			
			    AnimationFrame.prototype.unsubscribe = function unsubscribe(ID) {
			        if (typeof ID === "string") {
			            /**
			             * If required method exist in the stack
			             */
			            if (this.stack[ID]) {
			                /**
			                 * Nullify method in the stack and destroy it
			                 */
			                this.stack[ID] = false;
			                delete this.stack[ID];
			            }
			        }
			    };
			    /**
			     * Watch and call methods
			     */
			
			
			    AnimationFrame.prototype.watch = function watch() {
			        try {
			            /**
			             * If stack exist, it is an object and it is contains methods
			             */
			            if (this.stack && _typeof(this.stack) === "object" && Object.keys(this.stack).length > 0) {
			                /**
			                 * Loop all methods in stack
			                 */
			                for (var ID in this.stack) {
			                    /**
			                     * Process only methods without extended properties
			                     */
			                    if (this.stack.hasOwnProperty(ID)) {
			                        try {
			                            /**
			                             * If ID exist and it is a string
			                             */
			                            if (ID && typeof ID === "string") {
			                                /**
			                                 * Get subscribed method params by ID
			                                 */
			                                var objCall = this.stack[ID];
			                                /**
			                                 * If params exist, it is an object, and it is contains call context,
			                                 * callback, and parameters which is array
			                                 */
			                                if (objCall && (typeof objCall === "undefined" ? "undefined" : _typeof(objCall)) === "object" && objCall.context && objCall.callback && objCall.params && _typeof(objCall.context) === "object" && typeof objCall.callback === "function" && Array.isArray(objCall.params)) {
			                                    /**
			                                     * Call subscribed method
			                                     */
			                                    objCall.callback.apply(objCall.context, objCall.params);
			                                }
			                            }
			                        } catch (e) {}
			                    }
			                }
			            }
			        } catch (e) {}
			        /**
			         * Recall watcher
			         */
			        root.requestAnimationFrame(this.watch.bind(this));
			    };
			
			    return AnimationFrame;
			}();
			/**
			 * Create single request animation frame object
			 * @type {AnimationFrame}
			 */
			
			
			root.AnimationFrame = root.AnimationFrame || new AnimationFrame();
			/**
			 * Export single AnimationFrame instance
			 */
			var _AnimationFrame = root.AnimationFrame;
			exports.default = _AnimationFrame;
			
			module.exports = _AnimationFrame;
			/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))
		
		/***/ }
		
		/******/ })
		});
		;
		//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uPzVjYTYqKiIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgOTBiZTM5YzljMTlkNTcwOGQ2MDc/MjQ4ZSoqIiwid2VicGFjazovLy8uL2xpYi9BbmltYXRpb25GcmFtZS50cz80MTQzKiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsTztBQ1ZBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUN0Q0E7O0FBRUE7O0FBRUEscUdBQW9HLG1CQUFtQixFQUFFLG1CQUFtQiw4SEFBOEg7O0FBRTFRLGtEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSztBQUNMO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE0QixpQkFBaUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBMkIsc0JBQXNCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWdCO0FBQ2hCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBQztBQUNEO0FBQ0E7QUFDQSxXQUFVO0FBQ1Y7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQyIsImZpbGUiOiIuL2xpYi9BbmltYXRpb25GcmFtZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiQW5pbWF0aW9uRnJhbWVcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiQW5pbWF0aW9uRnJhbWVcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiQW5pbWF0aW9uRnJhbWVcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgOTBiZTM5YzljMTlkNTcwOGQ2MDciLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgcm9vdCA9IHZvaWQgMDtcbmlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcm9vdCA9IGdsb2JhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByb290ID0ge307XG4gICAgfVxufSBlbHNlIHtcbiAgICByb290ID0gd2luZG93O1xufVxuLyoqXG4gKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgcG9seWZpbGxcbiAqL1xucm9vdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiByb290ICE9PSBcInVuZGVmaW5lZFwiICYmIChyb290LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCByb290LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCByb290Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCByb290Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgcm9vdC5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSkgfHwgZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHJvb3Quc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTtcbiAgICB9O1xufSgpO1xuLyoqXG4gKiBCaW5kIHBvbHlmaWxsXG4gKi9cbmZ1bmN0aW9uIGJpbmQoYikge1xuICAgIC8qKlxuICAgICAqIElmIHRyeSBiaW5kIHZhcmlhYmxlIHRoYXQgbm90IGEgZnVuY3Rpb24sIHRoZW4gdGhyb3cgZXJyb3JcbiAgICAgKi9cbiAgICBpZiAodHlwZW9mIHRoaXMgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgLSB3aGF0IGlzIHRyeWluZyB0byBiZSBib3VuZCBpcyBub3QgY2FsbGFibGVcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGxldCBBcnJheSBzbGljZSBmdW5jdGlvblxuICAgICAqL1xuICAgIHZhciBhID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuICAgIHZhciBmID0gYS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgdmFyIGUgPSB0aGlzO1xuICAgIGZ1bmN0aW9uIGMoKSB7XG4gICAgICAgIC8qXG4gICAgICAgICBpZiAoXG4gICAgICAgICB0eXBlb2Ygcm9vdCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgdHlwZW9mIHJvb3QuY29uc29sZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgdHlwZW9mIHJvb3QuY29uc29sZS5sb2cgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgKSB7XG4gICAgICAgICByb290LmNvbnNvbGUubG9nKFwiQmluZCBwb2x5ZmlsbFwiKTtcbiAgICAgICAgIH1cbiAgICAgICAgICovXG4gICAgfVxuICAgIGZ1bmN0aW9uIGQoKSB7XG4gICAgICAgIHJldHVybiBlLmFwcGx5KHRoaXMgaW5zdGFuY2VvZiBjID8gdGhpcyA6IGIgfHwgcm9vdCwgZi5jb25jYXQoYS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJlZCB0aGlzIHByb3RvdHlwZSBhcyBwcm90b3R5cGUgdG8gYmluZCBpbXBsZW1lbnRhdGlvbiBmdW5jdGlvbnNcbiAgICAgKi9cbiAgICBjLnByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuICAgIGQucHJvdG90eXBlID0gbmV3IGMoKTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYmluZCBwb2x5ZmlsbFxuICAgICAqL1xuICAgIHJldHVybiBkO1xufVxuRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBiaW5kO1xuLyoqXG4gKiBPYmplY3Qua2V5cyBwb2x5ZmlsbFxuICovXG5mdW5jdGlvbiBrZXlzKCkge1xuICAgIHZhciBoYXNEb05vdEVudW1CdWcgPSAheyB0b1N0cmluZzogbnVsbCB9LnByb3BlcnR5SXNFbnVtZXJhYmxlKFwidG9TdHJpbmdcIik7XG4gICAgdmFyIGRvTm90RW51bXMgPSBbXCJ0b1N0cmluZ1wiLCBcInRvTG9jYWxlU3RyaW5nXCIsIFwidmFsdWVPZlwiLCBcImhhc093blByb3BlcnR5XCIsIFwiaXNQcm90b3R5cGVPZlwiLCBcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsIFwiY29uc3RydWN0b3JcIl07XG4gICAgdmFyIGRvTm90RW51bXNMZW5ndGggPSBkb05vdEVudW1zLmxlbmd0aDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICBpZiAoKHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopKSAhPT0gXCJvYmplY3RcIiAmJiAodHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiIHx8IG9iaiA9PT0gbnVsbCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qua2V5cyBjYWxsZWQgb24gbm9uLW9iamVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwcm9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzRG9Ob3RFbnVtQnVnKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvTm90RW51bXNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBkb05vdEVudW1zW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChkb05vdEVudW1zW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuT2JqZWN0LmtleXMgPSBPYmplY3Qua2V5cyB8fCBrZXlzKCk7XG4vKipcbiAqIFJlcXVlc3QgYW5pbWF0aW9uIGZyYW1lIGNhbGwgc3RhY2sgY2xhc3NcbiAqL1xuXG52YXIgQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHJlcXVlc3QgYW5pbWF0aW9uIGZyYW1lXG4gICAgICovXG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uRnJhbWUoKSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBbmltYXRpb25GcmFtZSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN1YnNjcmliZWQgbWV0aG9kc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFjayA9IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RhcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHdhdGNoZXJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMud2F0Y2goKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlIG1ldGhvZCB0byB3YXRjaFxuICAgICAqIEBwYXJhbSBjb250ZXh0XG4gICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICogQHBhcmFtIHBhcmFtc1xuICAgICAqIEBwYXJhbSBJRFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICAgICAqL1xuXG5cbiAgICBBbmltYXRpb25GcmFtZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKCkge1xuICAgICAgICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogcm9vdDtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogW107XG4gICAgICAgIHZhciBJRCA9IGFyZ3VtZW50c1szXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgY29udGV4dCBhbmQgY2FsbGJhY2sgcGFzc2VkIGFuZCB0aGV5IGFyZSBvYmplY3QgYW5kIGZ1bmN0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoKHR5cGVvZiBjb250ZXh0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoY29udGV4dCkpID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiICYmICh0eXBlb2YgcGFyYW1zID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YocGFyYW1zKSkgPT09IFwib2JqZWN0XCIgJiYgQXJyYXkuaXNBcnJheShwYXJhbXMpICYmIChJRCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBJRCA9PT0gXCJzdHJpbmdcIikpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlIFVJRFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB2YXIgbG9jYWxJRCA9IElEIHx8IFwieC1cIiArIGQuZ2V0VGltZSgpICsgXCItXCIgKyBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxZTYpO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBZGQgbWV0aG9kIHRvIHRoZSBzdGFja1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLnN0YWNrW2xvY2FsSURdID0ge1xuICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXcml0ZSB0byBjb25zb2xlIGNvdW50IG9mIHRoZSBzdWJzY3JpYmVkIG1ldGhvZHNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm4gVUlEXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJldHVybiBsb2NhbElEO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVbnN1YnNjcmliZSBtZXRob2QgYnkgSURcbiAgICAgKiBAcGFyYW0gSURcbiAgICAgKi9cblxuXG4gICAgQW5pbWF0aW9uRnJhbWUucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUoSUQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBJRCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiByZXF1aXJlZCBtZXRob2QgZXhpc3QgaW4gdGhlIHN0YWNrXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnN0YWNrW0lEXSkge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIE51bGxpZnkgbWV0aG9kIGluIHRoZSBzdGFjayBhbmQgZGVzdHJveSBpdFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhY2tbSURdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3RhY2tbSURdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXYXRjaCBhbmQgY2FsbCBtZXRob2RzXG4gICAgICovXG5cblxuICAgIEFuaW1hdGlvbkZyYW1lLnByb3RvdHlwZS53YXRjaCA9IGZ1bmN0aW9uIHdhdGNoKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZiBzdGFjayBleGlzdCwgaXQgaXMgYW4gb2JqZWN0IGFuZCBpdCBpcyBjb250YWlucyBtZXRob2RzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLnN0YWNrICYmIF90eXBlb2YodGhpcy5zdGFjaykgPT09IFwib2JqZWN0XCIgJiYgT2JqZWN0LmtleXModGhpcy5zdGFjaykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIExvb3AgYWxsIG1ldGhvZHMgaW4gc3RhY2tcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBJRCBpbiB0aGlzLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBQcm9jZXNzIG9ubHkgbWV0aG9kcyB3aXRob3V0IGV4dGVuZGVkIHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YWNrLmhhc093blByb3BlcnR5KElEKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBJZiBJRCBleGlzdCBhbmQgaXQgaXMgYSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoSUQgJiYgdHlwZW9mIElEID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBHZXQgc3Vic2NyaWJlZCBtZXRob2QgcGFyYW1zIGJ5IElEXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqQ2FsbCA9IHRoaXMuc3RhY2tbSURdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogSWYgcGFyYW1zIGV4aXN0LCBpdCBpcyBhbiBvYmplY3QsIGFuZCBpdCBpcyBjb250YWlucyBjYWxsIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGNhbGxiYWNrLCBhbmQgcGFyYW1ldGVycyB3aGljaCBpcyBhcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iakNhbGwgJiYgKHR5cGVvZiBvYmpDYWxsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqQ2FsbCkpID09PSBcIm9iamVjdFwiICYmIG9iakNhbGwuY29udGV4dCAmJiBvYmpDYWxsLmNhbGxiYWNrICYmIG9iakNhbGwucGFyYW1zICYmIF90eXBlb2Yob2JqQ2FsbC5jb250ZXh0KSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqQ2FsbC5jYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiICYmIEFycmF5LmlzQXJyYXkob2JqQ2FsbC5wYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENhbGwgc3Vic2NyaWJlZCBtZXRob2RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqQ2FsbC5jYWxsYmFjay5hcHBseShvYmpDYWxsLmNvbnRleHQsIG9iakNhbGwucGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWNhbGwgd2F0Y2hlclxuICAgICAgICAgKi9cbiAgICAgICAgcm9vdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy53YXRjaC5iaW5kKHRoaXMpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEFuaW1hdGlvbkZyYW1lO1xufSgpO1xuLyoqXG4gKiBDcmVhdGUgc2luZ2xlIHJlcXVlc3QgYW5pbWF0aW9uIGZyYW1lIG9iamVjdFxuICogQHR5cGUge0FuaW1hdGlvbkZyYW1lfVxuICovXG5cblxucm9vdC5BbmltYXRpb25GcmFtZSA9IHJvb3QuQW5pbWF0aW9uRnJhbWUgfHwgbmV3IEFuaW1hdGlvbkZyYW1lKCk7XG4vKipcbiAqIEV4cG9ydCBzaW5nbGUgQW5pbWF0aW9uRnJhbWUgaW5zdGFuY2VcbiAqL1xudmFyIF9BbmltYXRpb25GcmFtZSA9IHJvb3QuQW5pbWF0aW9uRnJhbWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfQW5pbWF0aW9uRnJhbWU7XG5cbm1vZHVsZS5leHBvcnRzID0gX0FuaW1hdGlvbkZyYW1lO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbGliL0FuaW1hdGlvbkZyYW1lLnRzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMSAyIDMiXSwic291cmNlUm9vdCI6IiJ9
	
	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		
		exports.__esModule = true;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var URL = __webpack_require__(8);
		/**
		 * The document cookies storage
		 */
		
		var Cookies = function () {
		  /**
		   * The constructor should accept a hash to separate the scopes of storage
		   * @param hash {string}
		   */
		  function Cookies(hash) {
		    _classCallCheck(this, Cookies);
		
		    this.regValidKey = new RegExp("([a-zA-Z0-9_-]{0,})", "i");
		    this.hash = hash || location.hostname;
		  }
		  /**
		   * The method returns the flag whether supported this storage type or not
		   * @returns {boolean}
		   */
		
		
		  Cookies.prototype.isSupported = function isSupported() {
		    return (typeof document === "undefined" ? "undefined" : _typeof(document)) === "object" && typeof document.cookie === "string";
		  };
		  /**
		   * The method sets the value and returns true if it has been set
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @param value {string}
		   * @param expires {number}
		   * @param path {string}
		   * @param domain {string}
		   * @param secure {boolean}
		   * @return {boolean}
		   */
		
		
		  Cookies.prototype.setItem = function setItem() {
		    var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		    var key = arguments[1];
		    var value = arguments[2];
		    var expires = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;
		    var path = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "/";
		    var domain = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : location.hostname;
		    var secure = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : location.protocol === "https:";
		
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key) && typeof value === "string" && (value === "" || this.regValidKey.test(value)) && typeof expires === "number" && expires < 365 && typeof path === "string" && typeof domain === "string" && domain.indexOf(location.hostname) !== -1 && typeof secure === "boolean" && secure === (location.protocol === "https:")) {
		        /**
		         * Validate input data
		         */
		        var u = URL.parse("http://" + domain + path);
		        if (u.hostname === domain || u.path === path) {
		          /**
		           * If that store is supported
		           */
		          if (!checkSupport || this.isSupported()) {
		            /**
		             * The hash needs for splitting scopes storage
		             * @type {string}
		             */
		            var localKey = this.hash + "_" + key;
		            /**
		             * Save cookies for 30 days
		             * @type {Date}
		             */
		            var date = new Date();
		            date.setTime(date.getTime() + expires * 24 * 60 * 60 * 1000);
		            var exp = date.toUTCString();
		            /**
		             * Encode value for store
		             * @type {string}
		             */
		            value = encodeURIComponent(value);
		            /**
		             * Writing value to the document cookie storage
		             * @type {string}
		             */
		            document.cookie = localKey + "=" + value + (exp ? "; expires=" + exp : "") + (path ? "; path=" + path : "") + (domain ? "; domain=" + domain : "") + (secure ? "; secure" : "");
		            /**
		             * If all ok return true
		             */
		            return this.getItem(checkSupport, key) === decodeURIComponent(value);
		          } else {
		            /**
		             * If cookie does not supported return false
		             */
		            return false;
		          }
		        } else {
		          /**
		           * If input data is not valid
		           */
		          return false;
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method reads the value and returns it or returns false if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {string|boolean}
		   */
		
		
		  Cookies.prototype.getItem = function getItem() {
		    var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		    var key = arguments[1];
		
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key)) {
		        /**
		         * If that store is supported
		         */
		        if (!checkSupport || this.isSupported()) {
		          /**
		           * The hash needs for splitting scopes storage
		           * @type {string}
		           */
		          key = this.hash + "_" + key;
		          /**
		           * Get the array from document cookie split by ;
		           * @type {string[]}
		           */
		          var arrCookie = document.cookie.split(";");
		          /**
		           * Iterate through the cookies
		           */
		          for (var _iterator = arrCookie, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		            var _ref;
		
		            if (_isArray) {
		              if (_i >= _iterator.length) break;
		              _ref = _iterator[_i++];
		            } else {
		              _i = _iterator.next();
		              if (_i.done) break;
		              _ref = _i.value;
		            }
		
		            var i = _ref;
		
		            /**
		             * Trim and split each cookie by = for key value pare
		             * @type {string[]}
		             */
		            var v = i.trim().split("=", 2);
		            /**
		             * If it is correct cookie key return the value
		             */
		            if (v[0] === key) {
		              /**
		               * If the value was found return the value
		               */
		              return decodeURIComponent(v[1]);
		            }
		          }
		          /**
		           * If the value was not found return false
		           */
		          return false;
		        } else {
		          /**
		           * If cookie does not supported return false
		           */
		          return false;
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method removes the value and return true if the value does not exist
		   * @param checkSupport {boolean}
		   * @param key {string}
		   * @returns {boolean}
		   */
		
		
		  Cookies.prototype.removeItem = function removeItem() {
		    var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		    var key = arguments[1];
		
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key)) {
		        /**
		         * If that store is supported
		         */
		        if (!checkSupport || this.isSupported()) {
		          /**
		           * Set empty overdue value by key
		           */
		          this.setItem(checkSupport, key, "", -1 * 24 * 60 * 60);
		          /**
		           * If all ok return true
		           */
		          return this.getItem(checkSupport, key) === false;
		        } else {
		          /**
		           * If cookie does not supported return false
		           */
		          return false;
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		  /**
		   * The method returns the array of string of available keys
		   * @param checkSupport {boolean}
		   * @returns {string[]}
		   */
		
		
		  Cookies.prototype.getKeys = function getKeys() {
		    var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean") {
		        /**
		         * If that store is supported
		         */
		        if (!checkSupport || this.isSupported()) {
		          /**
		           * The array of available keys
		           * @type {Array}
		           */
		          var arrKeys = [];
		          /**
		           * Get the array from document cookie split by ;
		           * @type {string[]}
		           */
		          var arrCookie = document.cookie.split(";");
		          /**
		           * Iterate through the cookies
		           */
		          for (var _iterator2 = arrCookie, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
		            var _ref2;
		
		            if (_isArray2) {
		              if (_i2 >= _iterator2.length) break;
		              _ref2 = _iterator2[_i2++];
		            } else {
		              _i2 = _iterator2.next();
		              if (_i2.done) break;
		              _ref2 = _i2.value;
		            }
		
		            var i = _ref2;
		
		            /**
		             * Trim and split each cookie by = for key value pare
		             * @type {string[]}
		             */
		            var v = i.trim().split("=", 2);
		            /**
		             * If the key contains hash add it to the list
		             */
		            if (v[0].indexOf(this.hash) === 0) {
		              /**
		               * Add key to the list
		               */
		              arrKeys.push(v[0].substr(this.hash.length + 1));
		            }
		          }
		          return arrKeys;
		        } else {
		          /**
		           * If cookie does not supported return false
		           */
		          return [];
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        return [];
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return [];
		    }
		  };
		  /**
		   * The method cleans the storage and return true if it is empty
		   * @param checkSupport {boolean}
		   * @returns {boolean}
		   */
		
		
		  Cookies.prototype.clear = function clear() {
		    var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		
		    try {
		      /**
		       * Validate input data
		       */
		      if (typeof checkSupport === "boolean") {
		        /**
		         * If that store is supported
		         */
		        if (!checkSupport || this.isSupported()) {
		          var arrKeys = this.getKeys(checkSupport);
		          if (arrKeys) {
		            for (var _iterator3 = arrKeys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
		              var _ref3;
		
		              if (_isArray3) {
		                if (_i3 >= _iterator3.length) break;
		                _ref3 = _iterator3[_i3++];
		              } else {
		                _i3 = _iterator3.next();
		                if (_i3.done) break;
		                _ref3 = _i3.value;
		              }
		
		              var i = _ref3;
		
		              this.removeItem(checkSupport, i);
		            }
		          }
		          /**
		           * If all ok return true
		           */
		          return this.getKeys(checkSupport).length === 0;
		        } else {
		          /**
		           * If cookie does not supported return false
		           */
		          return true;
		        }
		      } else {
		        /**
		         * If input data is not valid
		         */
		        return false;
		      }
		    } catch (e) {
		      /**
		       * If something goes wrong return false
		       */
		      return false;
		    }
		  };
		
		  return Cookies;
		}();
		
		exports.default = Cookies;
	
	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {
	
		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.
		
		var punycode = __webpack_require__(9);
		
		exports.parse = urlParse;
		exports.resolve = urlResolve;
		exports.resolveObject = urlResolveObject;
		exports.format = urlFormat;
		
		exports.Url = Url;
		
		function Url() {
		  this.protocol = null;
		  this.slashes = null;
		  this.auth = null;
		  this.host = null;
		  this.port = null;
		  this.hostname = null;
		  this.hash = null;
		  this.search = null;
		  this.query = null;
		  this.pathname = null;
		  this.path = null;
		  this.href = null;
		}
		
		// Reference: RFC 3986, RFC 1808, RFC 2396
		
		// define these here so at least they only have to be
		// compiled once on the first module load.
		var protocolPattern = /^([a-z0-9.+-]+:)/i,
		    portPattern = /:[0-9]*$/,
		
		    // RFC 2396: characters reserved for delimiting URLs.
		    // We actually just auto-escape these.
		    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
		
		    // RFC 2396: characters not allowed for various reasons.
		    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
		
		    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
		    autoEscape = ['\''].concat(unwise),
		    // Characters that are never ever allowed in a hostname.
		    // Note that any invalid chars are also handled, but these
		    // are the ones that are *expected* to be seen, so we fast-path
		    // them.
		    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
		    hostEndingChars = ['/', '?', '#'],
		    hostnameMaxLen = 255,
		    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
		    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
		    // protocols that can allow "unsafe" and "unwise" chars.
		    unsafeProtocol = {
		      'javascript': true,
		      'javascript:': true
		    },
		    // protocols that never have a hostname.
		    hostlessProtocol = {
		      'javascript': true,
		      'javascript:': true
		    },
		    // protocols that always contain a // bit.
		    slashedProtocol = {
		      'http': true,
		      'https': true,
		      'ftp': true,
		      'gopher': true,
		      'file': true,
		      'http:': true,
		      'https:': true,
		      'ftp:': true,
		      'gopher:': true,
		      'file:': true
		    },
		    querystring = __webpack_require__(11);
		
		function urlParse(url, parseQueryString, slashesDenoteHost) {
		  if (url && isObject(url) && url instanceof Url) return url;
		
		  var u = new Url;
		  u.parse(url, parseQueryString, slashesDenoteHost);
		  return u;
		}
		
		Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
		  if (!isString(url)) {
		    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
		  }
		
		  var rest = url;
		
		  // trim before proceeding.
		  // This is to support parse stuff like "  http://foo.com  \n"
		  rest = rest.trim();
		
		  var proto = protocolPattern.exec(rest);
		  if (proto) {
		    proto = proto[0];
		    var lowerProto = proto.toLowerCase();
		    this.protocol = lowerProto;
		    rest = rest.substr(proto.length);
		  }
		
		  // figure out if it's got a host
		  // user@server is *always* interpreted as a hostname, and url
		  // resolution will treat //foo/bar as host=foo,path=bar because that's
		  // how the browser resolves relative URLs.
		  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
		    var slashes = rest.substr(0, 2) === '//';
		    if (slashes && !(proto && hostlessProtocol[proto])) {
		      rest = rest.substr(2);
		      this.slashes = true;
		    }
		  }
		
		  if (!hostlessProtocol[proto] &&
		      (slashes || (proto && !slashedProtocol[proto]))) {
		
		    // there's a hostname.
		    // the first instance of /, ?, ;, or # ends the host.
		    //
		    // If there is an @ in the hostname, then non-host chars *are* allowed
		    // to the left of the last @ sign, unless some host-ending character
		    // comes *before* the @-sign.
		    // URLs are obnoxious.
		    //
		    // ex:
		    // http://a@b@c/ => user:a@b host:c
		    // http://a@b?@c => user:a host:c path:/?@c
		
		    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
		    // Review our test case against browsers more comprehensively.
		
		    // find the first instance of any hostEndingChars
		    var hostEnd = -1;
		    for (var i = 0; i < hostEndingChars.length; i++) {
		      var hec = rest.indexOf(hostEndingChars[i]);
		      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
		        hostEnd = hec;
		    }
		
		    // at this point, either we have an explicit point where the
		    // auth portion cannot go past, or the last @ char is the decider.
		    var auth, atSign;
		    if (hostEnd === -1) {
		      // atSign can be anywhere.
		      atSign = rest.lastIndexOf('@');
		    } else {
		      // atSign must be in auth portion.
		      // http://a@b/c@d => host:b auth:a path:/c@d
		      atSign = rest.lastIndexOf('@', hostEnd);
		    }
		
		    // Now we have a portion which is definitely the auth.
		    // Pull that off.
		    if (atSign !== -1) {
		      auth = rest.slice(0, atSign);
		      rest = rest.slice(atSign + 1);
		      this.auth = decodeURIComponent(auth);
		    }
		
		    // the host is the remaining to the left of the first non-host char
		    hostEnd = -1;
		    for (var i = 0; i < nonHostChars.length; i++) {
		      var hec = rest.indexOf(nonHostChars[i]);
		      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
		        hostEnd = hec;
		    }
		    // if we still have not hit it, then the entire thing is a host.
		    if (hostEnd === -1)
		      hostEnd = rest.length;
		
		    this.host = rest.slice(0, hostEnd);
		    rest = rest.slice(hostEnd);
		
		    // pull out port.
		    this.parseHost();
		
		    // we've indicated that there is a hostname,
		    // so even if it's empty, it has to be present.
		    this.hostname = this.hostname || '';
		
		    // if hostname begins with [ and ends with ]
		    // assume that it's an IPv6 address.
		    var ipv6Hostname = this.hostname[0] === '[' &&
		        this.hostname[this.hostname.length - 1] === ']';
		
		    // validate a little.
		    if (!ipv6Hostname) {
		      var hostparts = this.hostname.split(/\./);
		      for (var i = 0, l = hostparts.length; i < l; i++) {
		        var part = hostparts[i];
		        if (!part) continue;
		        if (!part.match(hostnamePartPattern)) {
		          var newpart = '';
		          for (var j = 0, k = part.length; j < k; j++) {
		            if (part.charCodeAt(j) > 127) {
		              // we replace non-ASCII char with a temporary placeholder
		              // we need this to make sure size of hostname is not
		              // broken by replacing non-ASCII by nothing
		              newpart += 'x';
		            } else {
		              newpart += part[j];
		            }
		          }
		          // we test again with ASCII char only
		          if (!newpart.match(hostnamePartPattern)) {
		            var validParts = hostparts.slice(0, i);
		            var notHost = hostparts.slice(i + 1);
		            var bit = part.match(hostnamePartStart);
		            if (bit) {
		              validParts.push(bit[1]);
		              notHost.unshift(bit[2]);
		            }
		            if (notHost.length) {
		              rest = '/' + notHost.join('.') + rest;
		            }
		            this.hostname = validParts.join('.');
		            break;
		          }
		        }
		      }
		    }
		
		    if (this.hostname.length > hostnameMaxLen) {
		      this.hostname = '';
		    } else {
		      // hostnames are always lower case.
		      this.hostname = this.hostname.toLowerCase();
		    }
		
		    if (!ipv6Hostname) {
		      // IDNA Support: Returns a puny coded representation of "domain".
		      // It only converts the part of the domain name that
		      // has non ASCII characters. I.e. it dosent matter if
		      // you call it with a domain that already is in ASCII.
		      var domainArray = this.hostname.split('.');
		      var newOut = [];
		      for (var i = 0; i < domainArray.length; ++i) {
		        var s = domainArray[i];
		        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
		            'xn--' + punycode.encode(s) : s);
		      }
		      this.hostname = newOut.join('.');
		    }
		
		    var p = this.port ? ':' + this.port : '';
		    var h = this.hostname || '';
		    this.host = h + p;
		    this.href += this.host;
		
		    // strip [ and ] from the hostname
		    // the host field still retains them, though
		    if (ipv6Hostname) {
		      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
		      if (rest[0] !== '/') {
		        rest = '/' + rest;
		      }
		    }
		  }
		
		  // now rest is set to the post-host stuff.
		  // chop off any delim chars.
		  if (!unsafeProtocol[lowerProto]) {
		
		    // First, make 100% sure that any "autoEscape" chars get
		    // escaped, even if encodeURIComponent doesn't think they
		    // need to be.
		    for (var i = 0, l = autoEscape.length; i < l; i++) {
		      var ae = autoEscape[i];
		      var esc = encodeURIComponent(ae);
		      if (esc === ae) {
		        esc = escape(ae);
		      }
		      rest = rest.split(ae).join(esc);
		    }
		  }
		
		
		  // chop off from the tail first.
		  var hash = rest.indexOf('#');
		  if (hash !== -1) {
		    // got a fragment string.
		    this.hash = rest.substr(hash);
		    rest = rest.slice(0, hash);
		  }
		  var qm = rest.indexOf('?');
		  if (qm !== -1) {
		    this.search = rest.substr(qm);
		    this.query = rest.substr(qm + 1);
		    if (parseQueryString) {
		      this.query = querystring.parse(this.query);
		    }
		    rest = rest.slice(0, qm);
		  } else if (parseQueryString) {
		    // no query string, but parseQueryString still requested
		    this.search = '';
		    this.query = {};
		  }
		  if (rest) this.pathname = rest;
		  if (slashedProtocol[lowerProto] &&
		      this.hostname && !this.pathname) {
		    this.pathname = '/';
		  }
		
		  //to support http.request
		  if (this.pathname || this.search) {
		    var p = this.pathname || '';
		    var s = this.search || '';
		    this.path = p + s;
		  }
		
		  // finally, reconstruct the href based on what has been validated.
		  this.href = this.format();
		  return this;
		};
		
		// format a parsed object into a url string
		function urlFormat(obj) {
		  // ensure it's an object, and not a string url.
		  // If it's an obj, this is a no-op.
		  // this way, you can call url_format() on strings
		  // to clean up potentially wonky urls.
		  if (isString(obj)) obj = urlParse(obj);
		  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
		  return obj.format();
		}
		
		Url.prototype.format = function() {
		  var auth = this.auth || '';
		  if (auth) {
		    auth = encodeURIComponent(auth);
		    auth = auth.replace(/%3A/i, ':');
		    auth += '@';
		  }
		
		  var protocol = this.protocol || '',
		      pathname = this.pathname || '',
		      hash = this.hash || '',
		      host = false,
		      query = '';
		
		  if (this.host) {
		    host = auth + this.host;
		  } else if (this.hostname) {
		    host = auth + (this.hostname.indexOf(':') === -1 ?
		        this.hostname :
		        '[' + this.hostname + ']');
		    if (this.port) {
		      host += ':' + this.port;
		    }
		  }
		
		  if (this.query &&
		      isObject(this.query) &&
		      Object.keys(this.query).length) {
		    query = querystring.stringify(this.query);
		  }
		
		  var search = this.search || (query && ('?' + query)) || '';
		
		  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
		
		  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
		  // unless they had them to begin with.
		  if (this.slashes ||
		      (!protocol || slashedProtocol[protocol]) && host !== false) {
		    host = '//' + (host || '');
		    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
		  } else if (!host) {
		    host = '';
		  }
		
		  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
		  if (search && search.charAt(0) !== '?') search = '?' + search;
		
		  pathname = pathname.replace(/[?#]/g, function(match) {
		    return encodeURIComponent(match);
		  });
		  search = search.replace('#', '%23');
		
		  return protocol + host + pathname + search + hash;
		};
		
		function urlResolve(source, relative) {
		  return urlParse(source, false, true).resolve(relative);
		}
		
		Url.prototype.resolve = function(relative) {
		  return this.resolveObject(urlParse(relative, false, true)).format();
		};
		
		function urlResolveObject(source, relative) {
		  if (!source) return relative;
		  return urlParse(source, false, true).resolveObject(relative);
		}
		
		Url.prototype.resolveObject = function(relative) {
		  if (isString(relative)) {
		    var rel = new Url();
		    rel.parse(relative, false, true);
		    relative = rel;
		  }
		
		  var result = new Url();
		  Object.keys(this).forEach(function(k) {
		    result[k] = this[k];
		  }, this);
		
		  // hash is always overridden, no matter what.
		  // even href="" will remove it.
		  result.hash = relative.hash;
		
		  // if the relative url is empty, then there's nothing left to do here.
		  if (relative.href === '') {
		    result.href = result.format();
		    return result;
		  }
		
		  // hrefs like //foo/bar always cut to the protocol.
		  if (relative.slashes && !relative.protocol) {
		    // take everything except the protocol from relative
		    Object.keys(relative).forEach(function(k) {
		      if (k !== 'protocol')
		        result[k] = relative[k];
		    });
		
		    //urlParse appends trailing / to urls like http://www.example.com
		    if (slashedProtocol[result.protocol] &&
		        result.hostname && !result.pathname) {
		      result.path = result.pathname = '/';
		    }
		
		    result.href = result.format();
		    return result;
		  }
		
		  if (relative.protocol && relative.protocol !== result.protocol) {
		    // if it's a known url protocol, then changing
		    // the protocol does weird things
		    // first, if it's not file:, then we MUST have a host,
		    // and if there was a path
		    // to begin with, then we MUST have a path.
		    // if it is file:, then the host is dropped,
		    // because that's known to be hostless.
		    // anything else is assumed to be absolute.
		    if (!slashedProtocol[relative.protocol]) {
		      Object.keys(relative).forEach(function(k) {
		        result[k] = relative[k];
		      });
		      result.href = result.format();
		      return result;
		    }
		
		    result.protocol = relative.protocol;
		    if (!relative.host && !hostlessProtocol[relative.protocol]) {
		      var relPath = (relative.pathname || '').split('/');
		      while (relPath.length && !(relative.host = relPath.shift()));
		      if (!relative.host) relative.host = '';
		      if (!relative.hostname) relative.hostname = '';
		      if (relPath[0] !== '') relPath.unshift('');
		      if (relPath.length < 2) relPath.unshift('');
		      result.pathname = relPath.join('/');
		    } else {
		      result.pathname = relative.pathname;
		    }
		    result.search = relative.search;
		    result.query = relative.query;
		    result.host = relative.host || '';
		    result.auth = relative.auth;
		    result.hostname = relative.hostname || relative.host;
		    result.port = relative.port;
		    // to support http.request
		    if (result.pathname || result.search) {
		      var p = result.pathname || '';
		      var s = result.search || '';
		      result.path = p + s;
		    }
		    result.slashes = result.slashes || relative.slashes;
		    result.href = result.format();
		    return result;
		  }
		
		  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
		      isRelAbs = (
		          relative.host ||
		          relative.pathname && relative.pathname.charAt(0) === '/'
		      ),
		      mustEndAbs = (isRelAbs || isSourceAbs ||
		                    (result.host && relative.pathname)),
		      removeAllDots = mustEndAbs,
		      srcPath = result.pathname && result.pathname.split('/') || [],
		      relPath = relative.pathname && relative.pathname.split('/') || [],
		      psychotic = result.protocol && !slashedProtocol[result.protocol];
		
		  // if the url is a non-slashed url, then relative
		  // links like ../.. should be able
		  // to crawl up to the hostname, as well.  This is strange.
		  // result.protocol has already been set by now.
		  // Later on, put the first path part into the host field.
		  if (psychotic) {
		    result.hostname = '';
		    result.port = null;
		    if (result.host) {
		      if (srcPath[0] === '') srcPath[0] = result.host;
		      else srcPath.unshift(result.host);
		    }
		    result.host = '';
		    if (relative.protocol) {
		      relative.hostname = null;
		      relative.port = null;
		      if (relative.host) {
		        if (relPath[0] === '') relPath[0] = relative.host;
		        else relPath.unshift(relative.host);
		      }
		      relative.host = null;
		    }
		    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
		  }
		
		  if (isRelAbs) {
		    // it's absolute.
		    result.host = (relative.host || relative.host === '') ?
		                  relative.host : result.host;
		    result.hostname = (relative.hostname || relative.hostname === '') ?
		                      relative.hostname : result.hostname;
		    result.search = relative.search;
		    result.query = relative.query;
		    srcPath = relPath;
		    // fall through to the dot-handling below.
		  } else if (relPath.length) {
		    // it's relative
		    // throw away the existing file, and take the new path instead.
		    if (!srcPath) srcPath = [];
		    srcPath.pop();
		    srcPath = srcPath.concat(relPath);
		    result.search = relative.search;
		    result.query = relative.query;
		  } else if (!isNullOrUndefined(relative.search)) {
		    // just pull out the search.
		    // like href='?foo'.
		    // Put this after the other two cases because it simplifies the booleans
		    if (psychotic) {
		      result.hostname = result.host = srcPath.shift();
		      //occationaly the auth can get stuck only in host
		      //this especialy happens in cases like
		      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
		      var authInHost = result.host && result.host.indexOf('@') > 0 ?
		                       result.host.split('@') : false;
		      if (authInHost) {
		        result.auth = authInHost.shift();
		        result.host = result.hostname = authInHost.shift();
		      }
		    }
		    result.search = relative.search;
		    result.query = relative.query;
		    //to support http.request
		    if (!isNull(result.pathname) || !isNull(result.search)) {
		      result.path = (result.pathname ? result.pathname : '') +
		                    (result.search ? result.search : '');
		    }
		    result.href = result.format();
		    return result;
		  }
		
		  if (!srcPath.length) {
		    // no path at all.  easy.
		    // we've already handled the other stuff above.
		    result.pathname = null;
		    //to support http.request
		    if (result.search) {
		      result.path = '/' + result.search;
		    } else {
		      result.path = null;
		    }
		    result.href = result.format();
		    return result;
		  }
		
		  // if a url ENDs in . or .., then it must get a trailing slash.
		  // however, if it ends in anything else non-slashy,
		  // then it must NOT get a trailing slash.
		  var last = srcPath.slice(-1)[0];
		  var hasTrailingSlash = (
		      (result.host || relative.host) && (last === '.' || last === '..') ||
		      last === '');
		
		  // strip single dots, resolve double dots to parent dir
		  // if the path tries to go above the root, `up` ends up > 0
		  var up = 0;
		  for (var i = srcPath.length; i >= 0; i--) {
		    last = srcPath[i];
		    if (last == '.') {
		      srcPath.splice(i, 1);
		    } else if (last === '..') {
		      srcPath.splice(i, 1);
		      up++;
		    } else if (up) {
		      srcPath.splice(i, 1);
		      up--;
		    }
		  }
		
		  // if the path is allowed to go above the root, restore leading ..s
		  if (!mustEndAbs && !removeAllDots) {
		    for (; up--; up) {
		      srcPath.unshift('..');
		    }
		  }
		
		  if (mustEndAbs && srcPath[0] !== '' &&
		      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
		    srcPath.unshift('');
		  }
		
		  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
		    srcPath.push('');
		  }
		
		  var isAbsolute = srcPath[0] === '' ||
		      (srcPath[0] && srcPath[0].charAt(0) === '/');
		
		  // put the host back
		  if (psychotic) {
		    result.hostname = result.host = isAbsolute ? '' :
		                                    srcPath.length ? srcPath.shift() : '';
		    //occationaly the auth can get stuck only in host
		    //this especialy happens in cases like
		    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
		    var authInHost = result.host && result.host.indexOf('@') > 0 ?
		                     result.host.split('@') : false;
		    if (authInHost) {
		      result.auth = authInHost.shift();
		      result.host = result.hostname = authInHost.shift();
		    }
		  }
		
		  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
		
		  if (mustEndAbs && !isAbsolute) {
		    srcPath.unshift('');
		  }
		
		  if (!srcPath.length) {
		    result.pathname = null;
		    result.path = null;
		  } else {
		    result.pathname = srcPath.join('/');
		  }
		
		  //to support request.http
		  if (!isNull(result.pathname) || !isNull(result.search)) {
		    result.path = (result.pathname ? result.pathname : '') +
		                  (result.search ? result.search : '');
		  }
		  result.auth = relative.auth || result.auth;
		  result.slashes = result.slashes || relative.slashes;
		  result.href = result.format();
		  return result;
		};
		
		Url.prototype.parseHost = function() {
		  var host = this.host;
		  var port = portPattern.exec(host);
		  if (port) {
		    port = port[0];
		    if (port !== ':') {
		      this.port = port.substr(1);
		    }
		    host = host.substr(0, host.length - port.length);
		  }
		  if (host) this.hostname = host;
		};
		
		function isString(arg) {
		  return typeof arg === "string";
		}
		
		function isObject(arg) {
		  return typeof arg === 'object' && arg !== null;
		}
		
		function isNull(arg) {
		  return arg === null;
		}
		function isNullOrUndefined(arg) {
		  return  arg == null;
		}
	
	
	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {
	
		var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
		;(function(root) {
		
			/** Detect free variables */
			var freeExports = typeof exports == 'object' && exports &&
				!exports.nodeType && exports;
			var freeModule = typeof module == 'object' && module &&
				!module.nodeType && module;
			var freeGlobal = typeof global == 'object' && global;
			if (
				freeGlobal.global === freeGlobal ||
				freeGlobal.window === freeGlobal ||
				freeGlobal.self === freeGlobal
			) {
				root = freeGlobal;
			}
		
			/**
			 * The `punycode` object.
			 * @name punycode
			 * @type Object
			 */
			var punycode,
		
			/** Highest positive signed 32-bit float value */
			maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
		
			/** Bootstring parameters */
			base = 36,
			tMin = 1,
			tMax = 26,
			skew = 38,
			damp = 700,
			initialBias = 72,
			initialN = 128, // 0x80
			delimiter = '-', // '\x2D'
		
			/** Regular expressions */
			regexPunycode = /^xn--/,
			regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
			regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
		
			/** Error messages */
			errors = {
				'overflow': 'Overflow: input needs wider integers to process',
				'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
				'invalid-input': 'Invalid input'
			},
		
			/** Convenience shortcuts */
			baseMinusTMin = base - tMin,
			floor = Math.floor,
			stringFromCharCode = String.fromCharCode,
		
			/** Temporary variable */
			key;
		
			/*--------------------------------------------------------------------------*/
		
			/**
			 * A generic error utility function.
			 * @private
			 * @param {String} type The error type.
			 * @returns {Error} Throws a `RangeError` with the applicable error message.
			 */
			function error(type) {
				throw RangeError(errors[type]);
			}
		
			/**
			 * A generic `Array#map` utility function.
			 * @private
			 * @param {Array} array The array to iterate over.
			 * @param {Function} callback The function that gets called for every array
			 * item.
			 * @returns {Array} A new array of values returned by the callback function.
			 */
			function map(array, fn) {
				var length = array.length;
				var result = [];
				while (length--) {
					result[length] = fn(array[length]);
				}
				return result;
			}
		
			/**
			 * A simple `Array#map`-like wrapper to work with domain name strings or email
			 * addresses.
			 * @private
			 * @param {String} domain The domain name or email address.
			 * @param {Function} callback The function that gets called for every
			 * character.
			 * @returns {Array} A new string of characters returned by the callback
			 * function.
			 */
			function mapDomain(string, fn) {
				var parts = string.split('@');
				var result = '';
				if (parts.length > 1) {
					// In email addresses, only the domain name should be punycoded. Leave
					// the local part (i.e. everything up to `@`) intact.
					result = parts[0] + '@';
					string = parts[1];
				}
				// Avoid `split(regex)` for IE8 compatibility. See #17.
				string = string.replace(regexSeparators, '\x2E');
				var labels = string.split('.');
				var encoded = map(labels, fn).join('.');
				return result + encoded;
			}
		
			/**
			 * Creates an array containing the numeric code points of each Unicode
			 * character in the string. While JavaScript uses UCS-2 internally,
			 * this function will convert a pair of surrogate halves (each of which
			 * UCS-2 exposes as separate characters) into a single code point,
			 * matching UTF-16.
			 * @see `punycode.ucs2.encode`
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode.ucs2
			 * @name decode
			 * @param {String} string The Unicode input string (UCS-2).
			 * @returns {Array} The new array of code points.
			 */
			function ucs2decode(string) {
				var output = [],
				    counter = 0,
				    length = string.length,
				    value,
				    extra;
				while (counter < length) {
					value = string.charCodeAt(counter++);
					if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
						// high surrogate, and there is a next character
						extra = string.charCodeAt(counter++);
						if ((extra & 0xFC00) == 0xDC00) { // low surrogate
							output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
						} else {
							// unmatched surrogate; only append this code unit, in case the next
							// code unit is the high surrogate of a surrogate pair
							output.push(value);
							counter--;
						}
					} else {
						output.push(value);
					}
				}
				return output;
			}
		
			/**
			 * Creates a string based on an array of numeric code points.
			 * @see `punycode.ucs2.decode`
			 * @memberOf punycode.ucs2
			 * @name encode
			 * @param {Array} codePoints The array of numeric code points.
			 * @returns {String} The new Unicode string (UCS-2).
			 */
			function ucs2encode(array) {
				return map(array, function(value) {
					var output = '';
					if (value > 0xFFFF) {
						value -= 0x10000;
						output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
						value = 0xDC00 | value & 0x3FF;
					}
					output += stringFromCharCode(value);
					return output;
				}).join('');
			}
		
			/**
			 * Converts a basic code point into a digit/integer.
			 * @see `digitToBasic()`
			 * @private
			 * @param {Number} codePoint The basic numeric code point value.
			 * @returns {Number} The numeric value of a basic code point (for use in
			 * representing integers) in the range `0` to `base - 1`, or `base` if
			 * the code point does not represent a value.
			 */
			function basicToDigit(codePoint) {
				if (codePoint - 48 < 10) {
					return codePoint - 22;
				}
				if (codePoint - 65 < 26) {
					return codePoint - 65;
				}
				if (codePoint - 97 < 26) {
					return codePoint - 97;
				}
				return base;
			}
		
			/**
			 * Converts a digit/integer into a basic code point.
			 * @see `basicToDigit()`
			 * @private
			 * @param {Number} digit The numeric value of a basic code point.
			 * @returns {Number} The basic code point whose value (when used for
			 * representing integers) is `digit`, which needs to be in the range
			 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
			 * used; else, the lowercase form is used. The behavior is undefined
			 * if `flag` is non-zero and `digit` has no uppercase form.
			 */
			function digitToBasic(digit, flag) {
				//  0..25 map to ASCII a..z or A..Z
				// 26..35 map to ASCII 0..9
				return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
			}
		
			/**
			 * Bias adaptation function as per section 3.4 of RFC 3492.
			 * http://tools.ietf.org/html/rfc3492#section-3.4
			 * @private
			 */
			function adapt(delta, numPoints, firstTime) {
				var k = 0;
				delta = firstTime ? floor(delta / damp) : delta >> 1;
				delta += floor(delta / numPoints);
				for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
					delta = floor(delta / baseMinusTMin);
				}
				return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
			}
		
			/**
			 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
			 * symbols.
			 * @memberOf punycode
			 * @param {String} input The Punycode string of ASCII-only symbols.
			 * @returns {String} The resulting string of Unicode symbols.
			 */
			function decode(input) {
				// Don't use UCS-2
				var output = [],
				    inputLength = input.length,
				    out,
				    i = 0,
				    n = initialN,
				    bias = initialBias,
				    basic,
				    j,
				    index,
				    oldi,
				    w,
				    k,
				    digit,
				    t,
				    /** Cached calculation results */
				    baseMinusT;
		
				// Handle the basic code points: let `basic` be the number of input code
				// points before the last delimiter, or `0` if there is none, then copy
				// the first basic code points to the output.
		
				basic = input.lastIndexOf(delimiter);
				if (basic < 0) {
					basic = 0;
				}
		
				for (j = 0; j < basic; ++j) {
					// if it's not a basic code point
					if (input.charCodeAt(j) >= 0x80) {
						error('not-basic');
					}
					output.push(input.charCodeAt(j));
				}
		
				// Main decoding loop: start just after the last delimiter if any basic code
				// points were copied; start at the beginning otherwise.
		
				for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
		
					// `index` is the index of the next character to be consumed.
					// Decode a generalized variable-length integer into `delta`,
					// which gets added to `i`. The overflow checking is easier
					// if we increase `i` as we go, then subtract off its starting
					// value at the end to obtain `delta`.
					for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
		
						if (index >= inputLength) {
							error('invalid-input');
						}
		
						digit = basicToDigit(input.charCodeAt(index++));
		
						if (digit >= base || digit > floor((maxInt - i) / w)) {
							error('overflow');
						}
		
						i += digit * w;
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
		
						if (digit < t) {
							break;
						}
		
						baseMinusT = base - t;
						if (w > floor(maxInt / baseMinusT)) {
							error('overflow');
						}
		
						w *= baseMinusT;
		
					}
		
					out = output.length + 1;
					bias = adapt(i - oldi, out, oldi == 0);
		
					// `i` was supposed to wrap around from `out` to `0`,
					// incrementing `n` each time, so we'll fix that now:
					if (floor(i / out) > maxInt - n) {
						error('overflow');
					}
		
					n += floor(i / out);
					i %= out;
		
					// Insert `n` at position `i` of the output
					output.splice(i++, 0, n);
		
				}
		
				return ucs2encode(output);
			}
		
			/**
			 * Converts a string of Unicode symbols (e.g. a domain name label) to a
			 * Punycode string of ASCII-only symbols.
			 * @memberOf punycode
			 * @param {String} input The string of Unicode symbols.
			 * @returns {String} The resulting Punycode string of ASCII-only symbols.
			 */
			function encode(input) {
				var n,
				    delta,
				    handledCPCount,
				    basicLength,
				    bias,
				    j,
				    m,
				    q,
				    k,
				    t,
				    currentValue,
				    output = [],
				    /** `inputLength` will hold the number of code points in `input`. */
				    inputLength,
				    /** Cached calculation results */
				    handledCPCountPlusOne,
				    baseMinusT,
				    qMinusT;
		
				// Convert the input in UCS-2 to Unicode
				input = ucs2decode(input);
		
				// Cache the length
				inputLength = input.length;
		
				// Initialize the state
				n = initialN;
				delta = 0;
				bias = initialBias;
		
				// Handle the basic code points
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue < 0x80) {
						output.push(stringFromCharCode(currentValue));
					}
				}
		
				handledCPCount = basicLength = output.length;
		
				// `handledCPCount` is the number of code points that have been handled;
				// `basicLength` is the number of basic code points.
		
				// Finish the basic string - if it is not empty - with a delimiter
				if (basicLength) {
					output.push(delimiter);
				}
		
				// Main encoding loop:
				while (handledCPCount < inputLength) {
		
					// All non-basic code points < n have been handled already. Find the next
					// larger one:
					for (m = maxInt, j = 0; j < inputLength; ++j) {
						currentValue = input[j];
						if (currentValue >= n && currentValue < m) {
							m = currentValue;
						}
					}
		
					// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
					// but guard against overflow
					handledCPCountPlusOne = handledCPCount + 1;
					if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
						error('overflow');
					}
		
					delta += (m - n) * handledCPCountPlusOne;
					n = m;
		
					for (j = 0; j < inputLength; ++j) {
						currentValue = input[j];
		
						if (currentValue < n && ++delta > maxInt) {
							error('overflow');
						}
		
						if (currentValue == n) {
							// Represent delta as a generalized variable-length integer
							for (q = delta, k = base; /* no condition */; k += base) {
								t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
								if (q < t) {
									break;
								}
								qMinusT = q - t;
								baseMinusT = base - t;
								output.push(
									stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
								);
								q = floor(qMinusT / baseMinusT);
							}
		
							output.push(stringFromCharCode(digitToBasic(q, 0)));
							bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
							delta = 0;
							++handledCPCount;
						}
					}
		
					++delta;
					++n;
		
				}
				return output.join('');
			}
		
			/**
			 * Converts a Punycode string representing a domain name or an email address
			 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
			 * it doesn't matter if you call it on a string that has already been
			 * converted to Unicode.
			 * @memberOf punycode
			 * @param {String} input The Punycoded domain name or email address to
			 * convert to Unicode.
			 * @returns {String} The Unicode representation of the given Punycode
			 * string.
			 */
			function toUnicode(input) {
				return mapDomain(input, function(string) {
					return regexPunycode.test(string)
						? decode(string.slice(4).toLowerCase())
						: string;
				});
			}
		
			/**
			 * Converts a Unicode string representing a domain name or an email address to
			 * Punycode. Only the non-ASCII parts of the domain name will be converted,
			 * i.e. it doesn't matter if you call it with a domain that's already in
			 * ASCII.
			 * @memberOf punycode
			 * @param {String} input The domain name or email address to convert, as a
			 * Unicode string.
			 * @returns {String} The Punycode representation of the given domain name or
			 * email address.
			 */
			function toASCII(input) {
				return mapDomain(input, function(string) {
					return regexNonASCII.test(string)
						? 'xn--' + encode(string)
						: string;
				});
			}
		
			/*--------------------------------------------------------------------------*/
		
			/** Define the public API */
			punycode = {
				/**
				 * A string representing the current Punycode.js version number.
				 * @memberOf punycode
				 * @type String
				 */
				'version': '1.3.2',
				/**
				 * An object of methods to convert from JavaScript's internal character
				 * representation (UCS-2) to Unicode code points, and back.
				 * @see <https://mathiasbynens.be/notes/javascript-encoding>
				 * @memberOf punycode
				 * @type Object
				 */
				'ucs2': {
					'decode': ucs2decode,
					'encode': ucs2encode
				},
				'decode': decode,
				'encode': encode,
				'toASCII': toASCII,
				'toUnicode': toUnicode
			};
		
			/** Expose `punycode` */
			// Some AMD build optimizers, like r.js, check for specific condition patterns
			// like the following:
			if (
				true
			) {
				!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
					return punycode;
				}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
			} else if (freeExports && freeModule) {
				if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
					freeModule.exports = punycode;
				} else { // in Narwhal or RingoJS v0.7.0-
					for (key in punycode) {
						punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
					}
				}
			} else { // in Rhino or a web browser
				root.punycode = punycode;
			}
		
		}(this));
		
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module), (function() { return this; }())))
	
	/***/ },
	/* 10 */
	/***/ function(module, exports) {
	
		module.exports = function(module) {
			if(!module.webpackPolyfill) {
				module.deprecate = function() {};
				module.paths = [];
				// module.parent = undefined by default
				module.children = [];
				module.webpackPolyfill = 1;
			}
			return module;
		}
	
	
	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		exports.decode = exports.parse = __webpack_require__(12);
		exports.encode = exports.stringify = __webpack_require__(13);
	
	
	/***/ },
	/* 12 */
	/***/ function(module, exports) {
	
		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.
		
		'use strict';
		
		// If obj.hasOwnProperty has been overridden, then calling
		// obj.hasOwnProperty(prop) will break.
		// See: https://github.com/joyent/node/issues/1707
		function hasOwnProperty(obj, prop) {
		  return Object.prototype.hasOwnProperty.call(obj, prop);
		}
		
		module.exports = function(qs, sep, eq, options) {
		  sep = sep || '&';
		  eq = eq || '=';
		  var obj = {};
		
		  if (typeof qs !== 'string' || qs.length === 0) {
		    return obj;
		  }
		
		  var regexp = /\+/g;
		  qs = qs.split(sep);
		
		  var maxKeys = 1000;
		  if (options && typeof options.maxKeys === 'number') {
		    maxKeys = options.maxKeys;
		  }
		
		  var len = qs.length;
		  // maxKeys <= 0 means that we should not limit keys count
		  if (maxKeys > 0 && len > maxKeys) {
		    len = maxKeys;
		  }
		
		  for (var i = 0; i < len; ++i) {
		    var x = qs[i].replace(regexp, '%20'),
		        idx = x.indexOf(eq),
		        kstr, vstr, k, v;
		
		    if (idx >= 0) {
		      kstr = x.substr(0, idx);
		      vstr = x.substr(idx + 1);
		    } else {
		      kstr = x;
		      vstr = '';
		    }
		
		    k = decodeURIComponent(kstr);
		    v = decodeURIComponent(vstr);
		
		    if (!hasOwnProperty(obj, k)) {
		      obj[k] = v;
		    } else if (Array.isArray(obj[k])) {
		      obj[k].push(v);
		    } else {
		      obj[k] = [obj[k], v];
		    }
		  }
		
		  return obj;
		};
	
	
	/***/ },
	/* 13 */
	/***/ function(module, exports) {
	
		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.
		
		'use strict';
		
		var stringifyPrimitive = function(v) {
		  switch (typeof v) {
		    case 'string':
		      return v;
		
		    case 'boolean':
		      return v ? 'true' : 'false';
		
		    case 'number':
		      return isFinite(v) ? v : '';
		
		    default:
		      return '';
		  }
		};
		
		module.exports = function(obj, sep, eq, name) {
		  sep = sep || '&';
		  eq = eq || '=';
		  if (obj === null) {
		    obj = undefined;
		  }
		
		  if (typeof obj === 'object') {
		    return Object.keys(obj).map(function(k) {
		      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
		      if (Array.isArray(obj[k])) {
		        return obj[k].map(function(v) {
		          return ks + encodeURIComponent(stringifyPrimitive(v));
		        }).join(sep);
		      } else {
		        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
		      }
		    }).join(sep);
		
		  }
		
		  if (!name) return '';
		  return encodeURIComponent(stringifyPrimitive(name)) + eq +
		         encodeURIComponent(stringifyPrimitive(obj));
		};
	
	
	/***/ },
	/* 14 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * The DOMStorage
		 */
		
		exports.__esModule = true;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var DOMStorage = function () {
		    /**
		     * The constructor should accept a hash to separate the scopes of storage
		     * @param hash {string}
		     */
		    function DOMStorage(hash) {
		        _classCallCheck(this, DOMStorage);
		
		        this.regValidKey = new RegExp("([a-zA-Z0-9_-]{0,})", "i");
		        this.hash = hash || location.hostname;
		        this.domStorage = document.getElementById(this.hash);
		        if (!this.domStorage) {
		            this.domStorage = document.createElement("div");
		            this.domStorage.id = this.hash;
		        }
		        if (document.body) {
		            document.body.appendChild(this.domStorage);
		            this.domStorage = document.getElementById(this.hash);
		            if (this.isSupported()) {
		                this.domStorage.style.behavior = "url(#default#userData)";
		            }
		        }
		    }
		    /**
		     * The method returns the flag whether supported this storage type or not
		     * @returns {boolean}
		     */
		
		
		    DOMStorage.prototype.isSupported = function isSupported() {
		        return _typeof(this.domStorage) === "object" && _typeof(this.domStorage.parentNode) === "object" && typeof this.domStorage.addBehavior !== "undefined";
		    };
		    /**
		     * The method sets the value and returns true if it has been set
		     * @param checkSupport {boolean}
		     * @param key {string}
		     * @param value {string}
		     * @return {boolean}
		     */
		
		
		    DOMStorage.prototype.setItem = function setItem() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		        var key = arguments[1];
		        var value = arguments[2];
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key) && typeof value === "string" && (value === "" || this.regValidKey.test(value))) {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The hash needs for splitting scopes storage
		                     * @type {string}
		                     */
		                    var localKey = this.hash + "_" + key;
		                    /**
		                     * Set dom value
		                     */
		                    this.domStorage.setAttribute(localKey, value);
		                    this.domStorage.save(this.hash);
		                    /**
		                     * If all ok return true
		                     */
		                    return this.getItem(checkSupport, key) === value;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return false;
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		    /**
		     * The method reads the value and returns it or returns false if the value does not exist
		     * @param checkSupport {boolean}
		     * @param key {string}
		     * @returns {string|boolean}
		     */
		
		
		    DOMStorage.prototype.getItem = function getItem() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		        var key = arguments[1];
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key)) {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The hash needs for splitting scopes storage
		                     * @type {string}
		                     */
		                    var localKey = this.hash + "_" + key;
		                    /**
		                     * Get value
		                     */
		                    this.domStorage.load(this.hash);
		                    var value = this.domStorage.getAttribute(localKey);
		                    /**
		                     * If value exist, return it
		                     */
		                    if (value) {
		                        return value;
		                    } else {
		                        return false;
		                    }
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return false;
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		    /**
		     * The method removes the value and return true if the value does not exist
		     * @param checkSupport {boolean}
		     * @param key {string}
		     * @returns {boolean}
		     */
		
		
		    DOMStorage.prototype.removeItem = function removeItem() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		        var key = arguments[1];
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key)) {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The hash needs for splitting scopes storage
		                     * @type {string}
		                     */
		                    var localKey = this.hash + "_" + key;
		                    /**
		                     * Clean value and remove
		                     * @type {boolean}
		                     */
		                    this.domStorage.removeAttribute(localKey);
		                    this.domStorage.save(this.hash);
		                    /**
		                     * If all ok return true
		                     */
		                    return this.getItem(checkSupport, key) === false;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return false;
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		    /**
		     * The method returns the array of string of available keys
		     * @param checkSupport {boolean}
		     * @returns {string[]}
		     */
		
		
		    DOMStorage.prototype.getKeys = function getKeys() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean") {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The array of available keys
		                     * @type {Array}
		                     */
		                    var arrKeys = [];
		                    /**
		                     * Get the array from document cookie split by ;
		                     * @type {string[]}
		                     */
		                    var localArrKeys = this.domStorage.XMLDocument.documentElement.attributes;
		                    /**
		                     * Iterate through the globalStorage
		                     */
		                    for (var i = 0; i < localArrKeys.length; i++) {
		                        var key = localArrKeys[i].name;
		                        /**
		                         * If the key contains hash add it to the list
		                         */
		                        if (key.indexOf(this.hash) === 0) {
		                            /**
		                             * Add key to the list
		                             */
		                            arrKeys.push(key.substr(this.hash.length + 1));
		                        }
		                    }
		                    return arrKeys;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return [];
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return [];
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return [];
		        }
		    };
		    /**
		     * The method cleans the storage and return true if it is empty
		     * @param checkSupport {boolean}
		     * @returns {boolean}
		     */
		
		
		    DOMStorage.prototype.clear = function clear() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean") {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    var arrKeys = this.getKeys(checkSupport);
		                    if (arrKeys) {
		                        for (var _iterator = arrKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		                            var _ref;
		
		                            if (_isArray) {
		                                if (_i >= _iterator.length) break;
		                                _ref = _iterator[_i++];
		                            } else {
		                                _i = _iterator.next();
		                                if (_i.done) break;
		                                _ref = _i.value;
		                            }
		
		                            var i = _ref;
		
		                            this.removeItem(checkSupport, i);
		                        }
		                    }
		                    /**
		                     * If all ok return true
		                     */
		                    return this.getKeys(checkSupport).length === 0;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return true;
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		
		    return DOMStorage;
		}();
		
		exports.default = DOMStorage;
	
	/***/ },
	/* 15 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * The GlobalStorage
		 */
		
		exports.__esModule = true;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var GlobalStorage = function () {
		    /**
		     * The constructor should accept a hash to separate the scopes of storage
		     * @param hash {string}
		     */
		    function GlobalStorage(hash) {
		        _classCallCheck(this, GlobalStorage);
		
		        this.regValidKey = new RegExp("([a-zA-Z0-9_-]{0,})", "i");
		        this.hash = hash || location.hostname;
		        if (!window.globalStorage) {
		            window.globalStorage = {};
		        }
		        if (!window.globalStorage[document.domain]) {
		            window.globalStorage[document.domain] = {};
		        }
		        this.globalStorage = window.globalStorage[document.domain];
		    }
		    /**
		     * The method returns the flag whether supported this storage type or not
		     * @returns {boolean}
		     */
		
		
		    GlobalStorage.prototype.isSupported = function isSupported() {
		        return _typeof(this.globalStorage) === "object";
		    };
		    /**
		     * The method sets the value and returns true if it has been set
		     * @param checkSupport {boolean}
		     * @param key {string}
		     * @param value {string}
		     * @return {boolean}
		     */
		
		
		    GlobalStorage.prototype.setItem = function setItem() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		        var key = arguments[1];
		        var value = arguments[2];
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key) && typeof value === "string" && (value === "" || this.regValidKey.test(value))) {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The hash needs for splitting scopes storage
		                     * @type {string}
		                     */
		                    var localKey = this.hash + "_" + key;
		                    /**
		                     * Set value
		                     * @type {string}
		                     */
		                    this.globalStorage[localKey] = value;
		                    /**
		                     * If all ok return true
		                     */
		                    return this.getItem(checkSupport, key) === value;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return false;
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		    /**
		     * The method reads the value and returns it or returns false if the value does not exist
		     * @param checkSupport {boolean}
		     * @param key {string}
		     * @returns {string|boolean}
		     */
		
		
		    GlobalStorage.prototype.getItem = function getItem() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		        var key = arguments[1];
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key)) {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The hash needs for splitting scopes storage
		                     * @type {string}
		                     */
		                    var localKey = this.hash + "_" + key;
		                    /**
		                     * Get value
		                     */
		                    var value = this.globalStorage[localKey];
		                    /**
		                     * If value exist, return it
		                     */
		                    if (value) {
		                        return value;
		                    } else {
		                        return false;
		                    }
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return false;
		                }
		            } else {
		                /**
		                 * If cookie does not supported return false
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		    /**
		     * The method removes the value and return true if the value does not exist
		     * @param checkSupport {boolean}
		     * @param key {string}
		     * @returns {boolean}
		     */
		
		
		    GlobalStorage.prototype.removeItem = function removeItem() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		        var key = arguments[1];
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key)) {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The hash needs for splitting scopes storage
		                     * @type {string}
		                     */
		                    var localKey = this.hash + "_" + key;
		                    /**
		                     * Clean value and remove
		                     * @type {boolean}
		                     */
		                    this.globalStorage[localKey] = false;
		                    delete this.globalStorage[localKey];
		                    /**
		                     * If all ok return true
		                     */
		                    return this.getItem(checkSupport, key) === false;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return false;
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		    /**
		     * The method returns the array of string of available keys
		     * @param checkSupport {boolean}
		     * @returns {string[]}
		     */
		
		
		    GlobalStorage.prototype.getKeys = function getKeys() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean") {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The array of available keys
		                     * @type {Array}
		                     */
		                    var arrKeys = [];
		                    /**
		                     * Get the array from document cookie split by ;
		                     * @type {string[]}
		                     */
		                    var localArrKeys = Object.keys(this.globalStorage);
		                    /**
		                     * Iterate through the globalStorage
		                     */
		                    for (var _iterator = localArrKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		                        var _ref;
		
		                        if (_isArray) {
		                            if (_i >= _iterator.length) break;
		                            _ref = _iterator[_i++];
		                        } else {
		                            _i = _iterator.next();
		                            if (_i.done) break;
		                            _ref = _i.value;
		                        }
		
		                        var key = _ref;
		
		                        /**
		                         * If the key contains hash add it to the list
		                         */
		                        if (key.indexOf(this.hash) === 0) {
		                            /**
		                             * Add key to the list
		                             */
		                            arrKeys.push(key.substr(this.hash.length + 1));
		                        }
		                    }
		                    return arrKeys;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return [];
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return [];
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return [];
		        }
		    };
		    /**
		     * The method cleans the storage and return true if it is empty
		     * @param checkSupport {boolean}
		     * @returns {boolean}
		     */
		
		
		    GlobalStorage.prototype.clear = function clear() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean") {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    var arrKeys = this.getKeys(checkSupport);
		                    if (arrKeys) {
		                        for (var _iterator2 = arrKeys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
		                            var _ref2;
		
		                            if (_isArray2) {
		                                if (_i2 >= _iterator2.length) break;
		                                _ref2 = _iterator2[_i2++];
		                            } else {
		                                _i2 = _iterator2.next();
		                                if (_i2.done) break;
		                                _ref2 = _i2.value;
		                            }
		
		                            var i = _ref2;
		
		                            this.removeItem(checkSupport, i);
		                        }
		                    }
		                    /**
		                     * If all ok return true
		                     */
		                    return this.getKeys(checkSupport).length === 0;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return true;
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		
		    return GlobalStorage;
		}();
		
		exports.default = GlobalStorage;
	
	/***/ },
	/* 16 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * The LocalStorage
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var LocalStorage = function () {
		    /**
		     * The constructor should accept a hash to separate the scopes of storage
		     * @param hash {string}
		     */
		    function LocalStorage(hash) {
		        _classCallCheck(this, LocalStorage);
		
		        this.regValidKey = new RegExp("([a-zA-Z0-9_-]{0,})", "i");
		        this.hash = hash || location.hostname;
		    }
		    /**
		     * The method returns the flag whether supported this storage type or not
		     * @returns {boolean}
		     */
		
		
		    LocalStorage.prototype.isSupported = function isSupported() {
		        return typeof window.localStorage !== "undefined";
		    };
		    /**
		     * The method sets the value and returns true if it has been set
		     * @param checkSupport {boolean}
		     * @param key {string}
		     * @param value {string}
		     * @return {boolean}
		     */
		
		
		    LocalStorage.prototype.setItem = function setItem() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		        var key = arguments[1];
		        var value = arguments[2];
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key) && typeof value === "string" && (value === "" || this.regValidKey.test(value))) {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The hash needs for splitting scopes storage
		                     * @type {string}
		                     */
		                    var localKey = this.hash + "_" + key;
		                    /**
		                     * Set value
		                     * @type {string}
		                     */
		                    window.localStorage.setItem(localKey, value);
		                    /**
		                     * If all ok return true
		                     */
		                    return this.getItem(checkSupport, key) === value;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return false;
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		    /**
		     * The method reads the value and returns it or returns false if the value does not exist
		     * @param checkSupport {boolean}
		     * @param key {string}
		     * @returns {string|boolean}
		     */
		
		
		    LocalStorage.prototype.getItem = function getItem() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		        var key = arguments[1];
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key)) {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The hash needs for splitting scopes storage
		                     * @type {string}
		                     */
		                    var localKey = this.hash + "_" + key;
		                    /**
		                     * Get value
		                     */
		                    var value = window.localStorage.getItem(localKey);
		                    /**
		                     * If value exist, return it
		                     */
		                    if (value) {
		                        return value;
		                    } else {
		                        return false;
		                    }
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return false;
		                }
		            } else {
		                /**
		                 * If cookie does not supported return false
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		    /**
		     * The method removes the value and return true if the value does not exist
		     * @param checkSupport {boolean}
		     * @param key {string}
		     * @returns {boolean}
		     */
		
		
		    LocalStorage.prototype.removeItem = function removeItem() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		        var key = arguments[1];
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key)) {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The hash needs for splitting scopes storage
		                     * @type {string}
		                     */
		                    var localKey = this.hash + "_" + key;
		                    /**
		                     * Clean value and remove
		                     * @type {boolean}
		                     */
		                    window.localStorage.removeItem(localKey);
		                    /**
		                     * If all ok return true
		                     */
		                    return this.getItem(checkSupport, key) === false;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return false;
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		    /**
		     * The method returns the array of string of available keys
		     * @param checkSupport {boolean}
		     * @returns {string[]}
		     */
		
		
		    LocalStorage.prototype.getKeys = function getKeys() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean") {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The array of available keys
		                     * @type {Array}
		                     */
		                    var arrKeys = [];
		                    /**
		                     * Iterate through the localStorage
		                     */
		                    for (var i = 0; i < window.localStorage.length; i++) {
		                        if (window.localStorage.key(i).indexOf(this.hash) === 0) {
		                            arrKeys.push(window.localStorage.key(i).substr(this.hash.length + 1));
		                        }
		                    }
		                    /**
		                     * Return keys
		                     */
		                    return arrKeys;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return [];
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return [];
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return [];
		        }
		    };
		    /**
		     * The method cleans the storage and return true if it is empty
		     * @param checkSupport {boolean}
		     * @returns {boolean}
		     */
		
		
		    LocalStorage.prototype.clear = function clear() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean") {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    var arrKeys = this.getKeys(checkSupport);
		                    if (arrKeys) {
		                        for (var _iterator = arrKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		                            var _ref;
		
		                            if (_isArray) {
		                                if (_i >= _iterator.length) break;
		                                _ref = _iterator[_i++];
		                            } else {
		                                _i = _iterator.next();
		                                if (_i.done) break;
		                                _ref = _i.value;
		                            }
		
		                            var i = _ref;
		
		                            this.removeItem(checkSupport, i);
		                        }
		                    }
		                    /**
		                     * If all ok return true
		                     */
		                    return this.getKeys(checkSupport).length === 0;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return true;
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		
		    return LocalStorage;
		}();
		
		exports.default = LocalStorage;
	
	/***/ },
	/* 17 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * The SessionStorage
		 */
		
		exports.__esModule = true;
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var SessionStorage = function () {
		    /**
		     * The constructor should accept a hash to separate the scopes of storage
		     * @param hash {string}
		     */
		    function SessionStorage(hash) {
		        _classCallCheck(this, SessionStorage);
		
		        this.regValidKey = new RegExp("([a-zA-Z0-9_-]{0,})", "i");
		        this.hash = hash || location.hostname;
		    }
		    /**
		     * The method returns the flag whether supported this storage type or not
		     * @returns {boolean}
		     */
		
		
		    SessionStorage.prototype.isSupported = function isSupported() {
		        return typeof window.sessionStorage !== "undefined";
		    };
		    /**
		     * The method sets the value and returns true if it has been set
		     * @param checkSupport {boolean}
		     * @param key {string}
		     * @param value {string}
		     * @return {boolean}
		     */
		
		
		    SessionStorage.prototype.setItem = function setItem() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		        var key = arguments[1];
		        var value = arguments[2];
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key) && typeof value === "string" && (value === "" || this.regValidKey.test(value))) {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The hash needs for splitting scopes storage
		                     * @type {string}
		                     */
		                    var localKey = this.hash + "_" + key;
		                    /**
		                     * Set value
		                     * @type {string}
		                     */
		                    window.sessionStorage.setItem(localKey, value);
		                    /**
		                     * If all ok return true
		                     */
		                    return this.getItem(checkSupport, key) === value;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return false;
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		    /**
		     * The method reads the value and returns it or returns false if the value does not exist
		     * @param checkSupport {boolean}
		     * @param key {string}
		     * @returns {string|boolean}
		     */
		
		
		    SessionStorage.prototype.getItem = function getItem() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		        var key = arguments[1];
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key)) {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The hash needs for splitting scopes storage
		                     * @type {string}
		                     */
		                    var localKey = this.hash + "_" + key;
		                    /**
		                     * Get value
		                     */
		                    var value = window.sessionStorage.getItem(localKey);
		                    /**
		                     * If value exist, return it
		                     */
		                    if (value) {
		                        return value;
		                    } else {
		                        return false;
		                    }
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return false;
		                }
		            } else {
		                /**
		                 * If cookie does not supported return false
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		    /**
		     * The method removes the value and return true if the value does not exist
		     * @param checkSupport {boolean}
		     * @param key {string}
		     * @returns {boolean}
		     */
		
		
		    SessionStorage.prototype.removeItem = function removeItem() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		        var key = arguments[1];
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean" && typeof key === "string" && this.regValidKey.test(key)) {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The hash needs for splitting scopes storage
		                     * @type {string}
		                     */
		                    var localKey = this.hash + "_" + key;
		                    /**
		                     * Clean value and remove
		                     * @type {boolean}
		                     */
		                    window.sessionStorage.removeItem(localKey);
		                    /**
		                     * If all ok return true
		                     */
		                    return this.getItem(checkSupport, key) === false;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return false;
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		    /**
		     * The method returns the array of string of available keys
		     * @param checkSupport {boolean}
		     * @returns {string[]}
		     */
		
		
		    SessionStorage.prototype.getKeys = function getKeys() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean") {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    /**
		                     * The array of available keys
		                     * @type {Array}
		                     */
		                    var arrKeys = [];
		                    /**
		                     * Iterate through the SessionStorage
		                     */
		                    for (var i = 0; i < window.sessionStorage.length; i++) {
		                        if (window.sessionStorage.key(i).indexOf(this.hash) === 0) {
		                            arrKeys.push(window.sessionStorage.key(i).substr(this.hash.length + 1));
		                        }
		                    }
		                    /**
		                     * Return keys
		                     */
		                    return arrKeys;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return [];
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return [];
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return [];
		        }
		    };
		    /**
		     * The method cleans the storage and return true if it is empty
		     * @param checkSupport {boolean}
		     * @returns {boolean}
		     */
		
		
		    SessionStorage.prototype.clear = function clear() {
		        var checkSupport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		
		        try {
		            /**
		             * Validate input data
		             */
		            if (typeof checkSupport === "boolean") {
		                /**
		                 * If that store is supported
		                 */
		                if (!checkSupport || this.isSupported()) {
		                    var arrKeys = this.getKeys(checkSupport);
		                    if (arrKeys) {
		                        for (var _iterator = arrKeys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
		                            var _ref;
		
		                            if (_isArray) {
		                                if (_i >= _iterator.length) break;
		                                _ref = _iterator[_i++];
		                            } else {
		                                _i = _iterator.next();
		                                if (_i.done) break;
		                                _ref = _i.value;
		                            }
		
		                            var i = _ref;
		
		                            this.removeItem(checkSupport, i);
		                        }
		                    }
		                    /**
		                     * If all ok return true
		                     */
		                    return this.getKeys(checkSupport).length === 0;
		                } else {
		                    /**
		                     * If cookie does not supported return false
		                     */
		                    return true;
		                }
		            } else {
		                /**
		                 * If input data is not valid
		                 */
		                return false;
		            }
		        } catch (e) {
		            /**
		             * If something goes wrong return false
		             */
		            return false;
		        }
		    };
		
		    return SessionStorage;
		}();
		
		exports.default = SessionStorage;
	
	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {(function () {
	  "use strict";
	
	  function btoa(str) {
	    var buffer
	      ;
	
	    if (str instanceof Buffer) {
	      buffer = str;
	    } else {
	      buffer = new Buffer(str.toString(), 'binary');
	    }
	
	    return buffer.toString('base64');
	  }
	
	  module.exports = btoa;
	}());
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10).Buffer))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __webpack_require__(11)
	var ieee754 = __webpack_require__(12)
	var isArray = __webpack_require__(13)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.
	
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()
	
	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()
	
	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }
	
	  return that
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }
	
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}
	
	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }
	
	  return fromObject(that, value)
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}
	
	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)
	
	  var actual = that.write(string, encoding)
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }
	
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer
	
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}
	
	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)
	
	    if (that.length === 0) {
	      return that
	    }
	
	    obj.copy(that, 0, 0, len)
	    return that
	  }
	
	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }
	
	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10).Buffer, (function() { return this; }())))

/***/ },
/* 11 */
/***/ function(module, exports) {

	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}
	
	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}
	
	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)
	
	  arr = new Arr(len * 3 / 4 - placeHolders)
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len
	
	  var L = 0
	
	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }
	
	  parts.push(output)
	
	  return parts.join('')
	}


/***/ },
/* 12 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 13 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,